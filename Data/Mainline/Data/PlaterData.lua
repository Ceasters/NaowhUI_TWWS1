local NUI = unpack(NaowhUI)

NUI.PlaterData = {
	["aura_breakline_space"] = 0,
	["script_data"] = {
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
	["OptionsValues"] = {
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
	["ScriptType"] = 1,
	["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["Time"] = 1721754091,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
	["NpcNames"] = {
	},
	["Enabled"] = true,
	["Revision"] = 636,
	["semver"] = "",
	["url"] = "",
	["Options"] = {
	{
	["Type"] = 6,
	["Key"] = "option1",
	["Value"] = 0,
	["Name"] = "Blank Space",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 5,
	["Key"] = "option2",
	["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
	["Name"] = "Option 2",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
	["Desc"] = "",
	},
	{
	["Type"] = 6,
	["Key"] = "option3",
	["Value"] = 0,
	["Name"] = "Blank Space",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 4,
	["Key"] = "glowEnabled",
	["Value"] = false,
	["Name"] = "Glow Enabled",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Key"] = "glowColor",
	["Value"] = {
	0.40392156862745,
	0.003921568627451,
	0,
	1,
	},
	["Name"] = "Glow Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "",
	},
	{
	["Type"] = 6,
	["Key"] = "option3",
	["Value"] = 0,
	["Name"] = "Blank Space",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 4,
	["Key"] = "dotsEnabled",
	["Value"] = true,
	["Name"] = "Dots Enabled",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Key"] = "dotsColor",
	["Value"] = {
	1,
	0.32156862745098,
	0,
	1,
	},
	["Name"] = "Dots Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "",
	},
	},
	["Author"] = "Tercioo-Sylvanas",
	["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
	["version"] = -1,
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
	["Name"] = "Aura - Buff Alert [Plater]",
	["PlaterCore"] = 1,
	["Prio"] = 99,
	["SpellIds"] = {
	398151,
	377738,
	378149,
	},
	["Desc"] = "Add the buff name in the trigger box.",
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
	["OptionsValues"] = {
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
	["ScriptType"] = 1,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
	["Time"] = 1721754093,
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
	["NpcNames"] = {
	},
	["Enabled"] = true,
	["Revision"] = 372,
	["semver"] = "",
	["url"] = "",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
	["Author"] = "Tercioo-Sylvanas",
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
	["Desc"] = "Add the debuff name in the trigger box.",
	["Prio"] = 99,
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
	["Name"] = "Aura - Debuff Alert [Plater]",
	["PlaterCore"] = 1,
	["SpellIds"] = {
	},
	["version"] = -1,
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
	["Options"] = {
	{
	["Type"] = 6,
	["Key"] = "option1",
	["Value"] = 0,
	["Name"] = "Blank Space",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 5,
	["Key"] = "option2",
	["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
	["Name"] = "Option 2",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
	["Desc"] = "",
	},
	{
	["Type"] = 6,
	["Key"] = "option3",
	["Value"] = 0,
	["Name"] = "Blank Space",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 4,
	["Key"] = "glowEnabled",
	["Value"] = false,
	["Name"] = "Glow Enabled",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Key"] = "glowColor",
	["Value"] = {
	0.40392156862745,
	0.003921568627451,
	0,
	1,
	},
	["Name"] = "Glow Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "",
	},
	{
	["Type"] = 6,
	["Key"] = "option3",
	["Value"] = 0,
	["Name"] = "Blank Space",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 4,
	["Key"] = "dotsEnabled",
	["Value"] = true,
	["Name"] = "Dots Enabled",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Key"] = "dotsColor",
	["Value"] = {
	1,
	0.32156862745098,
	0,
	1,
	},
	["Name"] = "Dots Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "",
	},
	},
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
	["OptionsValues"] = {
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
	["ScriptType"] = 3,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
	["Time"] = 1721754986,
	["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
	["Icon"] = 1029718,
	["url"] = "",
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
	["Revision"] = 274,
	["semver"] = "",
	["NpcNames"] = {
	},
	["Enabled"] = true,
	["Author"] = "Celian-Sylvanas",
	["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
	["SpellIds"] = {
	},
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
	["version"] = -1,
	["PlaterCore"] = 1,
	["Prio"] = 99,
	["Name"] = "Fixate [Plater]",
	["Desc"] = "Show above the nameplate who is the player fixated",
	["Options"] = {
	},
	},
	{
	["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
	["OptionsValues"] = {
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
	["ScriptType"] = 3,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["Time"] = 1720175307,
	["url"] = "",
	["Icon"] = 841383,
	["Enabled"] = true,
	["Revision"] = 268,
	["semver"] = "",
	["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
	["NpcNames"] = {
	},
	["Author"] = "Tecno-Azralon",
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
	["Options"] = {
	},
	["Prio"] = 99,
	["version"] = -1,
	["PlaterCore"] = 1,
	["SpellIds"] = {
	"spawn of g'huun",
	"smuggled crawg",
	"sergeant bainbridge",
	"blacktooth scrapper",
	"irontide grenadier",
	"feral bloodswarmer",
	"earthrager",
	"crawler mine",
	"rezan",
	},
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["Name"] = "Fixate On You [Plater]",
	["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TextSize = 12\n    envTable.TextFont  = \"Gotham Ultra\"\n    envTable.Xoffset = 0\n    envTable.Yoffset = -12\n    \n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"center\", unitFrame.healthBar, \"center\", envTable.Xoffset, envTable.Yoffset);    \n    \n    envTable.FixateTarget.textsize = envTable.TextSize\n    envTable.FixateTarget.textfont = envTable.TextFont\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n",
	["OptionsValues"] = {
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Show();\n    \n    \nend\n\n\n",
	["ScriptType"] = 3,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        \n        \n    else \n        envTable.FixateTarget.text = \"\"\n        \n    end    \nend\n\n\n\n\n\n\n\n\n",
	["Time"] = 1720175287,
	["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TextSize = 12\n    envTable.TextFont  = \"Gotham Ultra\"\n    envTable.Xoffset = 0\n    envTable.Yoffset = -12\n    \n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"center\", unitFrame.healthBar, \"center\", envTable.Xoffset, envTable.Yoffset);    \n    \n    envTable.FixateTarget.textsize = envTable.TextSize\n    envTable.FixateTarget.textfont = envTable.TextFont\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n",
	["Icon"] = 1029718,
	["url"] = "https://wago.io/cQbyWpQeE/3",
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n",
	["Revision"] = 303,
	["semver"] = "1.0.2",
	["NpcNames"] = {
	"Earthrager",
	"Spiteful Shade",
	"Carrion Worm",
	},
	["Enabled"] = true,
	["Author"] = "Celian-Sylvanas",
	["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Show();\n    \n    \nend\n\n\n",
	["SpellIds"] = {
	272584,
	244653,
	260954,
	257739,
	257314,
	266107,
	257582,
	262377,
	257407,
	},
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        \n        \n    else \n        envTable.FixateTarget.text = \"\"\n        \n    end    \nend\n\n\n\n\n\n\n\n\n",
	["version"] = 3,
	["PlaterCore"] = 1,
	["Prio"] = 99,
	["Name"] = "Fixate No cast",
	["Desc"] = "Show above the nameplate who is the player fixated",
	["Options"] = {
	},
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
	["OptionsValues"] = {
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["ScriptType"] = 1,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
	["Time"] = 1721754931,
	["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
	["url"] = "",
	["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["Enabled"] = true,
	["Revision"] = 36,
	["semver"] = "",
	["NpcNames"] = {
	},
	["Temp_OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
	["Author"] = "Ditador-Azralon",
	["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
	["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
	["SpellIds"] = {
	426662,
	426663,
	},
	["Prio"] = 99,
	["version"] = -1,
	["PlaterCore"] = 1,
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
	["Name"] = "Fixate by Unit Buff [P]",
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["Options"] = {
	{
	["Type"] = 1,
	["Key"] = "nameplateColor",
	["Value"] = {
	0,
	0.55686274509804,
	0.035294117647059,
	1,
	},
	["Name"] = "Nameplate Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
	},
	},
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
	["OptionsValues"] = {
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
	["ScriptType"] = 3,
	["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["Time"] = 1721754901,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
	["url"] = "",
	["Enabled"] = true,
	["Revision"] = 151,
	["Options"] = {
	{
	["Type"] = 5,
	["Key"] = "option1",
	["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
	["Name"] = "Option 1",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
	["Desc"] = "",
	},
	{
	["Type"] = 6,
	["Key"] = "",
	["Value"] = 0,
	["Name"] = "blank line",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Key"] = "indicatorColor",
	["Value"] = {
	1,
	1,
	1,
	1,
	},
	["Name"] = "Vertical Line Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Indicator color.",
	},
	{
	["Type"] = 2,
	["Max"] = 1,
	["Desc"] = "Indicator alpha.",
	["Min"] = 0.1,
	["Fraction"] = true,
	["Value"] = 0.79,
	["Key"] = "indicatorAlpha",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
	["Name"] = "Vertical Line Alpha",
	},
	{
	["Type"] = 6,
	["Key"] = "",
	["Value"] = 0,
	["Name"] = "blank line",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Key"] = "fillColor",
	["Value"] = {
	1,
	1,
	1,
	1,
	},
	["Name"] = "Fill Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Fill color.",
	},
	{
	["Type"] = 2,
	["Max"] = 1,
	["Desc"] = "Fill alpha.",
	["Min"] = 0,
	["Fraction"] = true,
	["Value"] = 0.2,
	["Key"] = "fillAlpha",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
	["Name"] = "Fill Alpha",
	},
	},
	["NpcNames"] = {
	"197697",
	"59544",
	"186227",
	"184020",
	"91005",
	},
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
	["Author"] = "Aelerolor-Torghast",
	["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
	["Name"] = "Add - Health Markers [P]",
	["Prio"] = 99,
	["SpellIds"] = {
	},
	["PlaterCore"] = 1,
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
	["version"] = -1,
	["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
	["semver"] = "",
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    envTable.Glow = scriptTable.config.glow\n    envTable.UpdateColor = function(self)\n        self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castbarColor))\n    end    \n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 8, -- number of lines. Defaul value is 8;\n        frequency = 0.4, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 12, -- length of lines. Default value depends on region size and number of lines;\n        th = 1, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\nend\n--Made for NaowhUI\n\n\n\n\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    if envTable.Glow then\n        Plater.StopPixelGlow(self, envTable.options.key)\n        self.glowStarted = false\n    end\nend\n\n\n\n\n\n\n\n\n",
	["OptionsValues"] = {
	["castbarColor"] = {
	0.9803922176361084,
	1,
	0.2745098173618317,
	1,
	},
	["castBarHeight"] = 2,
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    if envTable.Glow then        \n        Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n    end\n    if envTable.castBarHeightAdd ~= 0 then\n        local height = self:GetHeight()\n        \n        self:SetHeight (height + envTable.CastBarHeightAdd)\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["ScriptType"] = 2,
	["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
	["Time"] = 1720180069,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    if envTable.Glow then       \n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n        end\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n",
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    envTable.Glow = scriptTable.config.glow\n    envTable.UpdateColor = function(self)\n        self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castbarColor))\n    end    \n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 8, -- number of lines. Defaul value is 8;\n        frequency = 0.4, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 12, -- length of lines. Default value depends on region size and number of lines;\n        th = 1, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\nend\n--Made for NaowhUI\n\n\n\n\n\n\n",
	["NpcNames"] = {
	},
	["url"] = "https://wago.io/XShFX2Wcy/1",
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    if envTable.Glow then\n        Plater.StopPixelGlow(self, envTable.options.key)\n        self.glowStarted = false\n    end\nend\n\n\n\n\n\n\n\n\n",
	["Revision"] = 1442,
	["semver"] = "1.0.0",
	["Icon"] = 608940,
	["Enabled"] = true,
	["Author"] = "Tercioo-Sylvanas",
	["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
	["Desc"] = "",
	["Name"] = "NaowhUI - Important Kick",
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    if envTable.Glow then       \n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n        end\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n",
	["SpellIds"] = {
	374339,
	374045,
	395694,
	374699,
	377341,
	372743,
	392451,
	392924,
	384365,
	386024,
	387411,
	436841,
	373395,
	375596,
	386546,
	377389,
	388863,
	388392,
	367500,
	367503,
	372711,
	374544,
	385029,
	384638,
	369823,
	369675,
	369602,
	369365,
	369411,
	395427,
	372223,
	372538,
	322938,
	324776,
	324914,
	340544,
	},
	["PlaterCore"] = 1,
	["Prio"] = 99,
	["version"] = 1,
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    if envTable.Glow then        \n        Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n    end\n    if envTable.castBarHeightAdd ~= 0 then\n        local height = self:GetHeight()\n        \n        self:SetHeight (height + envTable.CastBarHeightAdd)\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["Options"] = {
	{
	["Type"] = 1,
	["Name"] = "Cast Bar Color",
	["Value"] = {
	1,
	0,
	1,
	1,
	},
	["Key"] = "castbarColor",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Color of the cast bar.",
	},
	{
	["Type"] = 2,
	["Max"] = 10,
	["Desc"] = "",
	["Min"] = 0,
	["Key"] = "castBarHeight",
	["Value"] = 4,
	["Fraction"] = false,
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
	["Name"] = "Cast Bar Height Size Change",
	},
	{
	["Type"] = 4,
	["Name"] = "Pixel Glow",
	["Value"] = true,
	["Key"] = "glow",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	},
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    envTable.Glow = scriptTable.config.glow\n    envTable.UpdateColor = function(self)\n        self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castbarColor))\n    end    \n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 8, -- number of lines. Defaul value is 8;\n        frequency = 0.4, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 12, -- length of lines. Default value depends on region size and number of lines;\n        th = 1, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\nend\n--Made for NaowhUI\n\n\n\n\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    if envTable.Glow then\n        Plater.StopPixelGlow(self, envTable.options.key)\n        self.glowStarted = false\n    end\nend\n\n\n\n\n\n\n\n\n",
	["OptionsValues"] = {
	["castbarColor"] = {
	1,
	0.3411764800548554,
	0.3254902064800263,
	1,
	},
	["castBarHeight"] = 1,
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    if envTable.Glow then        \n        Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n    end\n    if envTable.castBarHeightAdd ~= 0 then\n        local height = self:GetHeight()\n        \n        self:SetHeight (height + envTable.CastBarHeightAdd)\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["ScriptType"] = 2,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    if envTable.Glow then       \n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n        end\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n",
	["Time"] = 1720179052,
	["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
	["url"] = "https://wago.io/XShFX2Wcy/1",
	["NpcNames"] = {
	},
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    envTable.Glow = scriptTable.config.glow\n    envTable.UpdateColor = function(self)\n        self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castbarColor))\n    end    \n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 8, -- number of lines. Defaul value is 8;\n        frequency = 0.4, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 12, -- length of lines. Default value depends on region size and number of lines;\n        th = 1, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\nend\n--Made for NaowhUI\n\n\n\n\n\n\n",
	["Enabled"] = true,
	["Revision"] = 1426,
	["semver"] = "1.0.0",
	["Icon"] = 608940,
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    if envTable.Glow then\n        Plater.StopPixelGlow(self, envTable.options.key)\n        self.glowStarted = false\n    end\nend\n\n\n\n\n\n\n\n\n",
	["Author"] = "Tercioo-Sylvanas",
	["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
	["Desc"] = "",
	["Name"] = "NaowhUI - Important CC",
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    if envTable.Glow then       \n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n        end\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n",
	["SpellIds"] = {
	375950,
	372735,
	385536,
	383823,
	383693,
	388911,
	396812,
	367484,
	383062,
	373024,
	383385,
	369465,
	378818,
	372262,
	372225,
	},
	["PlaterCore"] = 1,
	["Prio"] = 99,
	["version"] = 1,
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    if envTable.Glow then        \n        Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n    end\n    if envTable.castBarHeightAdd ~= 0 then\n        local height = self:GetHeight()\n        \n        self:SetHeight (height + envTable.CastBarHeightAdd)\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["Options"] = {
	{
	["Type"] = 1,
	["Name"] = "Cast Bar Color",
	["Value"] = {
	1,
	0,
	1,
	1,
	},
	["Key"] = "castbarColor",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Color of the cast bar.",
	},
	{
	["Type"] = 2,
	["Max"] = 10,
	["Desc"] = "",
	["Min"] = 0,
	["Key"] = "castBarHeight",
	["Value"] = 4,
	["Fraction"] = false,
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
	["Name"] = "Cast Bar Height Size Change",
	},
	{
	["Type"] = 4,
	["Name"] = "Pixel Glow",
	["Value"] = true,
	["Key"] = "glow",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	},
	},
	{
	["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    envTable.Glow = scriptTable.config.glow\n    envTable.UpdateColor = function(self)\n        self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castbarColor))\n    end    \n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 8, -- number of lines. Defaul value is 8;\n        frequency = 0.4, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 12, -- length of lines. Default value depends on region size and number of lines;\n        th = 1, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\nend\n--Made for NaowhUI\n\n\n\n\n\n\n",
	["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    if envTable.Glow then\n        Plater.StopPixelGlow(self, envTable.options.key)\n        self.glowStarted = false\n    end\nend\n\n\n\n\n\n\n\n\n",
	["OptionsValues"] = {
	["castbarColor"] = {
	1,
	0.5686274766921997,
	0.9960784912109375,
	1,
	},
	["castBarHeight"] = 2,
	},
	["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    if envTable.Glow then        \n        Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n    end\n    if envTable.castBarHeightAdd ~= 0 then\n        local height = self:GetHeight()\n        \n        self:SetHeight (height + envTable.CastBarHeightAdd)\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["ScriptType"] = 2,
	["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    if envTable.Glow then       \n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n        end\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n",
	["Time"] = 1720179913,
	["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
	["url"] = "https://wago.io/XShFX2Wcy/1",
	["NpcNames"] = {
	},
	["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    envTable.Glow = scriptTable.config.glow\n    envTable.UpdateColor = function(self)\n        self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castbarColor))\n    end    \n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 8, -- number of lines. Defaul value is 8;\n        frequency = 0.4, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 12, -- length of lines. Default value depends on region size and number of lines;\n        th = 1, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\nend\n--Made for NaowhUI\n\n\n\n\n\n\n",
	["Enabled"] = true,
	["Revision"] = 1428,
	["semver"] = "1.0.0",
	["Icon"] = 608940,
	["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    if envTable.Glow then\n        Plater.StopPixelGlow(self, envTable.options.key)\n        self.glowStarted = false\n    end\nend\n\n\n\n\n\n\n\n\n",
	["Author"] = "Tercioo-Sylvanas",
	["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
	["Desc"] = "",
	["Name"] = "NaowhUI - Important Special",
	["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    if envTable.Glow then       \n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n        end\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n",
	["SpellIds"] = {
	391634,
	373692,
	391050,
	387145,
	387127,
	382670,
	396991,
	388008,
	388804,
	390912,
	388923,
	377004,
	388537,
	388822,
	378208,
	375065,
	376934,
	382883,
	373960,
	369754,
	372719,
	369328,
	381593,
	382578,
	376208,
	374365,
	381663,
	373424,
	376780,
	322486,
	324909,
	328756,
	323149,
	323059,
	323177,
	324987,
	340189,
	340279,
	340304,
	336499,
	},
	["PlaterCore"] = 1,
	["Prio"] = 99,
	["version"] = 1,
	["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    if envTable.Glow then        \n        Plater.StartPixelGlow(self, nil, envTable.options, envTable.options.key)\n    end\n    if envTable.castBarHeightAdd ~= 0 then\n        local height = self:GetHeight()\n        \n        self:SetHeight (height + envTable.CastBarHeightAdd)\n    end\n    envTable.UpdateColor(self)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["Options"] = {
	{
	["Type"] = 1,
	["Name"] = "Cast Bar Color",
	["Value"] = {
	1,
	0,
	1,
	1,
	},
	["Key"] = "castbarColor",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Color of the cast bar.",
	},
	{
	["Type"] = 2,
	["Max"] = 10,
	["Desc"] = "",
	["Min"] = 0,
	["Key"] = "castBarHeight",
	["Value"] = 4,
	["Fraction"] = false,
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
	["Name"] = "Cast Bar Height Size Change",
	},
	{
	["Type"] = 4,
	["Name"] = "Pixel Glow",
	["Value"] = true,
	["Key"] = "glow",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	},
	},
	},
	["saved_cvars_last_change"] = {
	["nameplateMotion"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:8602: in function `RefreshAutoToggle'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2341: in function `func'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:3965: in function `EventHandler'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:3976: in function `RunFunctionForEvent'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:3982: in function <Interface/AddOns/Plater/Plater.lua:3979>\n",
	},
	["aura_cache_by_name"] = {
	["fiery brand"] = {
	204021,
	204022,
	207744,
	207771,
	209245,
	209247,
	320962,
	343010,
	},
	},
	["url"] = "https://wago.io/FmaVCYoQ5/18",
	["indicator_raidmark_scale"] = 0.8899999856948853,
	["aura2_y_offset"] = 1.009994506835938,
	["aura_timer_text_anchor"] = {
	["y"] = -0.30000114440918,
	},
	["health_selection_overlay"] = "Naowh Target",
	["expansion_triggerwipe"] = {
	[9] = true,
	[8] = true,
	},
	["cast_statusbar_color_nointerrupt"] = {
	0.7058823704719543,
	0.7333333492279053,
	0.6941176652908325,
	1,
	},
	["npc_cache"] = {
	[99358] = {
	"Rotheart Dryad",
	"Darkheart Thicket",
	"enUS",
	},
	[196798] = {
	"Corrupted Manafiend",
	"Algeth'ar Academy",
	},
	[194241] = {
	"Vile Rothexer",
	"Brackenhide Hollow",
	"enUS",
	},
	[213806] = {
	"Splotch",
	"Throne of the Tides",
	"enUS",
	},
	[190405] = {
	"Infuser Sariya",
	"Halls of Infusion",
	"enUS",
	},
	[95842] = {
	"Valarjar Thundercaller",
	"Halls of Valor",
	},
	[180431] = {
	"Focused Ritualist",
	"Tazavesh, the Veiled Market",
	},
	[195265] = {
	"Stormcaller Arynga",
	"The Nokhud Offensive",
	"enUS",
	},
	[99359] = {
	"Rotheart Keeper",
	"Darkheart Thicket",
	"enUS",
	},
	[184908] = {
	"Vy Interceptor",
	"The Necrotic Wake",
	},
	[150254] = {
	"Scraphound",
	"Operation: Mechagon",
	},
	[173016] = {
	"Corpse Collector",
	"The Necrotic Wake",
	},
	[129602] = {
	"Irontide Enforcer",
	"Freehold",
	"enUS",
	},
	[180433] = {
	"Wandering Pulsar",
	"Tazavesh, the Veiled Market",
	},
	[209333] = {
	"Gnarlroot",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[120651] = {
	"Explosives",
	"Atal'Dazar",
	},
	[197697] = {
	"Flamegullet",
	"Ruby Life Pools",
	"enUS",
	},
	[40633] = {
	"Naz'jar Honor Guard",
	"Throne of the Tides",
	"enUS",
	},
	[184910] = {
	"Wo Drifter",
	"The Necrotic Wake",
	},
	[178133] = {
	"Murkbrine Wavejumper",
	"Tazavesh, the Veiled Market",
	},
	[197698] = {
	"Thunderhead",
	"Ruby Life Pools",
	"enUS",
	},
	[40825] = {
	"Erunak Stonespeaker",
	"Throne of the Tides",
	"enUS",
	},
	[131587] = {
	"Bewitched Captain",
	"Waycrest Manor",
	"enUS",
	},
	[184911] = {
	"Urh Dismantler",
	"The Necrotic Wake",
	},
	[126918] = {
	"Irontide Crackshot",
	"Freehold",
	"enUS",
	},
	[196548] = {
	"Ancient Branch",
	"Algeth'ar Academy",
	"enUS",
	},
	[135552] = {
	"Deathtouched Slaver",
	"Waycrest Manor",
	"enUS",
	},
	[186191] = {
	"Decay Speaker",
	"Brackenhide Hollow",
	"enUS",
	},
	[161895] = {
	"Thing From Beyond",
	"Horrific Vision of Orgrimmar",
	},
	[206140] = {
	"Coalesced Time",
	"Dawn of the Infinite",
	"enUS",
	},
	[83761] = {
	"Ogron Laborer",
	"Iron Docks",
	},
	[184018] = {
	"Bromach",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[208698] = {
	"Infinite Riftmage",
	"Dawn of the Infinite",
	"enUS",
	},
	[178392] = {
	"Gatewarden Zo'mazz",
	"Tazavesh, the Veiled Market",
	},
	[168418] = {
	"Forsworn Inquisitor",
	"Spires of Ascension",
	},
	[200387] = {
	"Shambling Infester",
	"Scarlet Monastery",
	"enUS",
	},
	[199748] = {
	"Timeline Marauder",
	"Dawn of the Infinite",
	"enUS",
	},
	[165222] = {
	"Zolramus Bonemender",
	"The Necrotic Wake",
	},
	[184020] = {
	"Hulking Berserker",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[199749] = {
	"Timestream Anomaly",
	"Dawn of the Infinite",
	"enUS",
	},
	[185683] = {
	"Wo Relic",
	"The Necrotic Wake",
	},
	[168420] = {
	"Forsworn Champion",
	"Spires of Ascension",
	},
	[208445] = {
	"Larodar, Keeper of the Flame",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[192333] = {
	"Alpha Eagle",
	"Algeth'ar Academy",
	"enUS",
	},
	[174175] = {
	"Loyal Stoneborn",
	"Halls of Atonement",
	},
	[96934] = {
	"Valarjar Trapper",
	"Halls of Valor",
	},
	[83763] = {
	"Grom'kar Technician",
	"Iron Docks",
	},
	[131849] = {
	"Crazed Marksman",
	"Waycrest Manor",
	"enUS",
	},
	[189265] = {
	"Qalashi Bonetender",
	"Neltharus",
	"enUS",
	},
	[185685] = {
	"Urh Relic",
	"The Necrotic Wake",
	},
	[131850] = {
	"Maddened Survivalist",
	"Waycrest Manor",
	"enUS",
	},
	[189266] = {
	"Qalashi Trainee",
	"Neltharus",
	"enUS",
	},
	[178141] = {
	"Murkbrine Scalebinder",
	"Tazavesh, the Veiled Market",
	},
	[196044] = {
	"Unruly Textbook",
	"Algeth'ar Academy",
	"enUS",
	},
	[190034] = {
	"Blazebound Destroyer",
	"Ruby Life Pools",
	"enUS",
	},
	[83892] = {
	"Life Warden Gola",
	"The Everbloom",
	"enUS",
	},
	[135048] = {
	"Gorestained Piglet",
	"Waycrest Manor",
	"enUS",
	},
	[178142] = {
	"Murkbrine Fishmancer",
	"Tazavesh, the Veiled Market",
	},
	[98406] = {
	"Embershard Scorpion",
	"Neltharion's Lair",
	},
	[194894] = {
	"Primalist Stormspeaker",
	"The Nokhud Offensive",
	"enUS",
	},
	[200137] = {
	"Depraved Mistweaver",
	"Temple of the Jade Serpent",
	"enUS",
	},
	[194895] = {
	"Unstable Squall",
	"The Nokhud Offensive",
	"enUS",
	},
	[83765] = {
	"Grom'kar Footsoldier",
	"Iron Docks",
	},
	[168681] = {
	"Forsworn Helion",
	"Spires of Ascension",
	},
	[99366] = {
	"Taintheart Summoner",
	"Darkheart Thicket",
	"enUS",
	},
	[101476] = {
	"Molten Charskin",
	"Neltharion's Lair",
	},
	[209090] = {
	"Tindral Sageswift",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[177889] = {
	"Mawforged Souljudge",
	"Sanctum of Domination",
	},
	[187224] = {
	"Vile Rothexer",
	"Brackenhide Hollow",
	"enUS",
	},
	[154744] = {
	"Toxic Monstrosity",
	"Operation: Mechagon",
	},
	[83894] = {
	"Dulhu",
	"The Everbloom",
	"enUS",
	},
	[98280] = {
	"Risen Arcanist",
	"Black Rook Hold",
	"enUS",
	},
	[194898] = {
	"Primalist Arcblade",
	"The Nokhud Offensive",
	"enUS",
	},
	[205384] = {
	"Infinite Chronoweaver",
	"Dawn of the Infinite",
	"enUS",
	},
	[212673] = {
	"Naz'jar Ravager",
	"Throne of the Tides",
	"enUS",
	},
	[133007] = {
	"Unbound Abomination",
	"The Underrot",
	},
	[172265] = {
	"Remnant of Fury",
	"Sanguine Depths",
	},
	[177892] = {
	"Mawforged Goliath",
	"Sanctum of Domination",
	},
	[165872] = {
	"Flesh Crafter",
	"The Necrotic Wake",
	},
	[131858] = {
	"Thornguard",
	"Waycrest Manor",
	"enUS",
	},
	[129547] = {
	"Blacktooth Knuckleduster",
	"Freehold",
	"enUS",
	},
	[45912] = {
	"Wild Vortex",
	"The Vortex Pinnacle",
	},
	[207177] = {
	"Infinite Watchkeeper",
	"Dawn of the Infinite",
	"enUS",
	},
	[127757] = {
	"Reanimated Honor Guard",
	"Atal'Dazar",
	"enUS",
	},
	[40925] = {
	"Tainted Sentry",
	"Throne of the Tides",
	"enUS",
	},
	[89011] = {
	"Rylak Skyterror",
	"Iron Docks",
	},
	[188252] = {
	"Melidrussa Chillworn",
	"Ruby Life Pools",
	"enUS",
	},
	[189531] = {
	"Decayed Elder",
	"Brackenhide Hollow",
	"enUS",
	},
	[162038] = {
	"Regal Mistdancer",
	"Sanguine Depths",
	},
	[98538] = {
	"Lady Velandras Ravencrest",
	"Black Rook Hold",
	"enUS",
	},
	[150146] = {
	"Scrapbone Shaman",
	"Operation: Mechagon",
	},
	[137103] = {
	"Blood Visage",
	"The Underrot",
	},
	[129548] = {
	"Blacktooth Brute",
	"Freehold",
	"enUS",
	},
	[101991] = {
	"Nightmare Dweller",
	"Darkheart Thicket",
	"enUS",
	},
	[162039] = {
	"Wicked Oppressor",
	"Sanguine Depths",
	},
	[82682] = {
	"Archmage Sol",
	"The Everbloom",
	"enUS",
	},
	[97068] = {
	"Storm Drake",
	"Halls of Valor",
	},
	[75713] = {
	"Shadowmoon Bone-Mender",
	"Shadowmoon Burial Grounds",
	},
	[186208] = {
	"Rotbow Stalker",
	"Brackenhide Hollow",
	"enUS",
	},
	[162040] = {
	"Grand Overseer",
	"Sanguine Depths",
	},
	[195927] = {
	"Soulharvester Galtmaa",
	"The Nokhud Offensive",
	"enUS",
	},
	[81212] = {
	"Grimrail Overseer",
	"Grimrail Depot",
	},
	[181861] = {
	"Magmatusk",
	"Neltharus",
	"enUS",
	},
	[150276] = {
	"Heavy Scrapbot",
	"Operation: Mechagon",
	},
	[83578] = {
	"Ogron Laborer",
	"Iron Docks",
	},
	[195928] = {
	"Soulharvester Duuren",
	"The Nokhud Offensive",
	"enUS",
	},
	[131863] = {
	"Raal the Gluttonous",
	"Waycrest Manor",
	"enUS",
	},
	[126928] = {
	"Irontide Corsair",
	"Freehold",
	"enUS",
	},
	[186338] = {
	"Maruuk",
	"The Nokhud Offensive",
	"enUS",
	},
	[203857] = {
	"Horde Warlock",
	"Dawn of the Infinite",
	"enUS",
	},
	[197847] = {
	"Gnawbone Splintershield",
	"10.0 Dragon Isles",
	},
	[195929] = {
	"Soulharvester Tumen",
	"The Nokhud Offensive",
	"enUS",
	},
	[131864] = {
	"Gorak Tul",
	"Waycrest Manor",
	"enUS",
	},
	[186339] = {
	"Teera",
	"The Nokhud Offensive",
	"enUS",
	},
	[75459] = {
	"Plagued Bat",
	"Shadowmoon Burial Grounds",
	},
	[198999] = {
	"Morchie",
	"Dawn of the Infinite",
	"enUS",
	},
	[193373] = {
	"Nokhud Thunderfist",
	"The Nokhud Offensive",
	"enUS",
	},
	[184422] = {
	"Emberon",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[199000] = {
	"Chrono-Lord Deios",
	"Dawn of the Infinite",
	"enUS",
	},
	[133912] = {
	"Bloodsworn Defiler",
	"The Underrot",
	},
	[75652] = {
	"Void Spawn",
	"Shadowmoon Burial Grounds",
	},
	[134041] = {
	"Infected Peasant",
	"Waycrest Manor",
	"enUS",
	},
	[203861] = {
	"Horde Destroyer",
	"Dawn of the Infinite",
	"enUS",
	},
	[98542] = {
	"Amalgam of Souls",
	"Black Rook Hold",
	"enUS",
	},
	[179821] = {
	"Commander Zo'far",
	"Tazavesh, the Veiled Market",
	},
	[83389] = {
	"Ironwing Flamespitter",
	"Iron Docks",
	},
	[81407] = {
	"Grimrail Bombardier",
	"Grimrail Depot",
	},
	[129552] = {
	"Monzumi",
	"Atal'Dazar",
	"enUS",
	},
	[154758] = {
	"Toxic Monstrosity",
	"Operation: Mechagon",
	},
	[193760] = {
	"Surging Ruiner",
	"Vault of the Incarnates",
	"enUS",
	},
	[115486] = {
	"Erudite Slayer",
	"Return to Karazhan",
	},
	[90998] = {
	"Blightshard Shaper",
	"Neltharion's Lair",
	},
	[122967] = {
	"Priestess Alun'za",
	"Atal'Dazar",
	"enUS",
	},
	[105704] = {
	"Arcane Manifestation",
	"Court of Stars",
	},
	[166396] = {
	"Noble Skirmisher",
	"Sanguine Depths",
	},
	[127315] = {
	"Reanimation Totem",
	"Atal'Dazar",
	"enUS",
	},
	[187240] = {
	"Drakonid Breaker",
	"The Azure Vault",
	"enUS",
	},
	[132126] = {
	"Gilded Priestess",
	"Atal'Dazar",
	"enUS",
	},
	[45915] = {
	"Armored Mistral",
	"The Vortex Pinnacle",
	},
	[162049] = {
	"Vestige of Doubt",
	"Sanguine Depths",
	},
	[197982] = {
	"Storm Warrior",
	"Ruby Life Pools",
	"enUS",
	},
	[168443] = {
	"Zolramus Necromancer",
	"The Necrotic Wake",
	},
	[77700] = {
	"Shadowmoon Exhumer",
	"Shadowmoon Burial Grounds",
	},
	[84989] = {
	"Infested Icecaller",
	"The Everbloom",
	"enUS",
	},
	[81984] = {
	"Gnarlroot",
	"The Everbloom",
	"enUS",
	},
	[180336] = {
	"Cartel Wiseguy",
	"Tazavesh, the Veiled Market",
	},
	[100526] = {
	"Tormented Bloodseeker",
	"Darkheart Thicket",
	"enUS",
	},
	[105705] = {
	"Bound Energy",
	"Court of Stars",
	},
	[170490] = {
	"Atal'ai High Priest",
	"De Other Side",
	},
	[168572] = {
	"Fungi Stormer",
	"Plaguefall",
	},
	[184301] = {
	"Cavern Seeker",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[115488] = {
	"Infused Pyromancer",
	"Return to Karazhan",
	},
	[102253] = {
	"Understone Demolisher",
	"Neltharion's Lair",
	},
	[97202] = {
	"Olmyr the Enlightened",
	"Halls of Valor",
	},
	[186220] = {
	"Brackenhide Shaper",
	"Brackenhide Hollow",
	"enUS",
	},
	[81985] = {
	"Everbloom Cultivator",
	"The Everbloom",
	"enUS",
	},
	[122969] = {
	"Zanchuli Witch-Doctor",
	"Atal'Dazar",
	"enUS",
	},
	[200926] = {
	"Igira the Cruel",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[197985] = {
	"Flame Channeler",
	"Ruby Life Pools",
	"enUS",
	},
	[168446] = {
	"Skeletal Monstrosity",
	"The Necrotic Wake",
	},
	[150160] = {
	"Scrapbone Bully",
	"Operation: Mechagon",
	},
	[83392] = {
	"Rampaging Clefthoof",
	"Iron Docks",
	},
	[162692] = {
	"Amarth",
	"The Necrotic Wake",
	},
	[178165] = {
	"Coastwalker Goliath",
	"Tazavesh, the Veiled Market",
	},
	[114338] = {
	"Mana Confluence",
	"Return to Karazhan",
	},
	[104300] = {
	"Shadow Mistress",
	"Court of Stars",
	},
	[171772] = {
	"Mistveil Defender",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[165762] = {
	"Soul Infuser",
	"Castle Nathria",
	},
	[131492] = {
	"Devout Blood Priest",
	"The Underrot",
	},
	[76104] = {
	"Monstrous Corpse Spider",
	"Shadowmoon Burial Grounds",
	},
	[81283] = {
	"Grom'kar Footsoldier",
	"Iron Docks",
	},
	[187246] = {
	"Nullmagic Hornswog",
	"The Azure Vault",
	"enUS",
	},
	[135329] = {
	"Matron Bryndle",
	"Waycrest Manor",
	"enUS",
	},
	[81603] = {
	"Champion Druna",
	"Iron Docks",
	},
	[166275] = {
	"Mistveil Shaper",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[165764] = {
	"Rockbound Vanquisher",
	"Castle Nathria",
	},
	[187503] = {
	"Ambitious Underboss",
	"10.0 Dragon Isles",
	},
	[166276] = {
	"Mistveil Guardian",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[168578] = {
	"Fungalmancer",
	"Plaguefall",
	},
	[150292] = {
	"Mechagon Cavalry",
	"Operation: Mechagon",
	},
	[45917] = {
	"Cloud Prince",
	"The Vortex Pinnacle",
	},
	[150165] = {
	"Slime Elemental",
	"Operation: Mechagon",
	},
	[186226] = {
	"Fetid Rotsinger",
	"Brackenhide Hollow",
	"enUS",
	},
	[125977] = {
	"Reanimation Totem",
	"Atal'Dazar",
	"enUS",
	},
	[122972] = {
	"Dazar'ai Augur",
	"Atal'Dazar",
	"enUS",
	},
	[186738] = {
	"Umbrelskul",
	"The Azure Vault",
	"enUS",
	},
	[205408] = {
	"Infinite Timeslicer",
	"Dawn of the Infinite",
	"enUS",
	},
	[170882] = {
	"Bone Magus",
	"Theater of Pain",
	},
	[186739] = {
	"Azureblade",
	"The Azure Vault",
	"enUS",
	},
	[196202] = {
	"Spectral Invoker",
	"Algeth'ar Academy",
	"enUS",
	},
	[103344] = {
	"Oakheart",
	"Darkheart Thicket",
	"enUS",
	},
	[122973] = {
	"Dazar'ai Confessor",
	"Atal'Dazar",
	"enUS",
	},
	[100531] = {
	"Bloodtainted Fury",
	"Darkheart Thicket",
	"enUS",
	},
	[196203] = {
	"Ethereal Restorer",
	"Algeth'ar Academy",
	"enUS",
	},
	[186229] = {
	"Wilted Oak",
	"Brackenhide Hollow",
	"enUS",
	},
	[186741] = {
	"Arcane Elemental",
	"The Azure Vault",
	"enUS",
	},
	[162317] = {
	"Gorechop",
	"Theater of Pain",
	},
	[150169] = {
	"Toxic Lurker",
	"Operation: Mechagon",
	},
	[183033] = {
	"Grim Reflection",
	"Sepulcher of the First Ones",
	},
	[174210] = {
	"Blighted Sludge-Spewer",
	"Theater of Pain",
	},
	[100532] = {
	"Bloodtainted Burster",
	"Darkheart Thicket",
	"enUS",
	},
	[187510] = {
	"Duskpaw Trapper",
	"10.0 Dragon Isles",
	},
	[163086] = {
	"Rancid Gasbag",
	"Theater of Pain",
	},
	[199659] = {
	"Warlord Kagni",
	"Aberrus, the Shadowed Crucible",
	"enUS",
	},
	[186616] = {
	"Granyth",
	"The Nokhud Offensive",
	"enUS",
	},
	[205158] = {
	"Spurlok, Timesworn Sentinel",
	"Dawn of the Infinite",
	"enUS",
	},
	[97720] = {
	"Blightshard Skitter",
	"Neltharion's Lair",
	},
	[45919] = {
	"Young Storm Dragon",
	"The Vortex Pinnacle",
	},
	[83846] = {
	"Yalnu",
	"The Everbloom",
	"enUS",
	},
	[138281] = {
	"Faceless Corruptor",
	"The Underrot",
	},
	[114792] = {
	"Virtuous Lady",
	"Return to Karazhan",
	},
	[173447] = {
	"Mushroom Mine",
	"Plaguefall",
	},
	[187897] = {
	"Defier Draghar",
	"Ruby Life Pools",
	"enUS",
	},
	[179841] = {
	"Veteran Sparkcaster",
	"Tazavesh, the Veiled Market",
	},
	[81737] = {
	"Unchecked Growth",
	"The Everbloom",
	"enUS",
	},
	[91008] = {
	"Rockbound Pelter",
	"Neltharion's Lair",
	},
	[168717] = {
	"Forsworn Justicar",
	"Spires of Ascension",
	},
	[144293] = {
	"Waste Processing Unit",
	"Operation: Mechagon",
	},
	[165137] = {
	"Zolramus Gatekeeper",
	"The Necrotic Wake",
	},
	[168718] = {
	"Forsworn Warden",
	"Spires of Ascension",
	},
	[144294] = {
	"Mechagon Tinkerer",
	"Operation: Mechagon",
	},
	[183424] = {
	"Virtuous Gentleman",
	"Return to Karazhan",
	},
	[191736] = {
	"Crawth",
	"Algeth'ar Academy",
	"enUS",
	},
	[144295] = {
	"Mechagon Mechanic",
	"Operation: Mechagon",
	},
	[183425] = {
	"Wholesome Host",
	"Return to Karazhan",
	},
	[105715] = {
	"Watchful Inquisitor",
	"Court of Stars",
	},
	[98810] = {
	"Wrathguard Bladelord",
	"Black Rook Hold",
	"enUS",
	},
	[205804] = {
	"Risen Dragon",
	"Dawn of the Infinite",
	"enUS",
	},
	[179334] = {
	"Portalmancer Zo'nyy",
	"Tazavesh, the Veiled Market",
	},
	[164501] = {
	"Mistcaller",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[130012] = {
	"Irontide Ravager",
	"Freehold",
	},
	[163862] = {
	"Defender of Many Eyes",
	"Plaguefall",
	},
	[214117] = {
	"Stormflurry Totem",
	"Throne of the Tides",
	"enUS",
	},
	[191739] = {
	"Scalebane Lieutenant",
	"The Azure Vault",
	"enUS",
	},
	[208363] = {
	"Urctos",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[144298] = {
	"Defense Bot Mk III",
	"Operation: Mechagon",
	},
	[176395] = {
	"Overloaded Mailemental",
	"Tazavesh, the Veiled Market",
	},
	[133685] = {
	"Befouled Spirit",
	"The Underrot",
	},
	[190206] = {
	"Primalist Flamedancer",
	"Ruby Life Pools",
	"enUS",
	},
	[184580] = {
	"Olaf",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[96574] = {
	"Stormforged Sentinel",
	"Halls of Valor",
	},
	[190207] = {
	"Primalist Cinderweaver",
	"Ruby Life Pools",
	"enUS",
	},
	[184581] = {
	"Baelog",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[104247] = {
	"Duskwatch Arcanist",
	"Court of Stars",
	},
	[130909] = {
	"Fetid Maggot",
	"The Underrot",
	},
	[186116] = {
	"Gutshot",
	"Brackenhide Hollow",
	"enUS",
	},
	[187523] = {
	"Duskpaw Stalker",
	"10.0 Dragon Isles",
	},
	[100539] = {
	"Taintheart Deadeye",
	"Darkheart Thicket",
	"enUS",
	},
	[208367] = {
	"Pip",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[165529] = {
	"Depraved Collector",
	"Halls of Atonement",
	},
	[98813] = {
	"Bloodscent Felhound",
	"Black Rook Hold",
	"enUS",
	},
	[206066] = {
	"Timestream Leech",
	"Dawn of the Infinite",
	"enUS",
	},
	[114542] = {
	"Ghostly Philanthropist",
	"Return to Karazhan",
	},
	[186246] = {
	"Fleshripper Vulture",
	"Brackenhide Hollow",
	"enUS",
	},
	[115757] = {
	"Wrathguard Flamebringer",
	"Return to Karazhan",
	},
	[96512] = {
	"Archdruid Glaidalis",
	"Darkheart Thicket",
	"enUS",
	},
	[96640] = {
	"Valarjar Marksman",
	"Halls of Valor",
	},
	[206068] = {
	"Temporal Fusion",
	"Dawn of the Infinite",
	"enUS",
	},
	[166299] = {
	"Mistveil Tender",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[186120] = {
	"Treemouth",
	"Brackenhide Hollow",
	"enUS",
	},
	[190340] = {
	"Refti Defender",
	"Halls of Infusion",
	"enUS",
	},
	[194816] = {
	"Forgewrought Monstrosity",
	"Neltharus",
	"enUS",
	},
	[130400] = {
	"Irontide Crusher",
	"Freehold",
	"enUS",
	},
	[186121] = {
	"Decatriarch Wratheye",
	"Brackenhide Hollow",
	"enUS",
	},
	[184331] = {
	"Infinite Timereaver",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[206070] = {
	"Chronaxie",
	"Dawn of the Infinite",
	"enUS",
	},
	[199037] = {
	"Primalist Shocktrooper",
	"Halls of Infusion",
	"enUS",
	},
	[114544] = {
	"Skeletal Usher",
	"Return to Karazhan",
	},
	[186122] = {
	"Rira Hackclaw",
	"Brackenhide Hollow",
	"enUS",
	},
	[199549] = {
	"Flamesworn Herald",
	"Vault of the Incarnates",
	},
	[98368] = {
	"Ghostly Protector",
	"Black Rook Hold",
	"enUS",
	},
	[122984] = {
	"Dazar'ai Colossus",
	"Atal'Dazar",
	"enUS",
	},
	[41096] = {
	"Naz'jar Oracle",
	"Throne of the Tides",
	"enUS",
	},
	[166302] = {
	"Corpse Harvester",
	"The Necrotic Wake",
	},
	[81297] = {
	"Dreadfang",
	"Iron Docks",
	},
	[155433] = {
	"Void-Touched Emissary",
	"Freehold",
	},
	[167965] = {
	"Lubricator",
	"De Other Side",
	},
	[195842] = {
	"Ukhel Corruptor",
	"The Nokhud Offensive",
	"enUS",
	},
	[99200] = {
	"Dresaron",
	"Darkheart Thicket",
	"enUS",
	},
	[163618] = {
	"Zolramus Necromancer",
	"The Necrotic Wake",
	},
	[196482] = {
	"Overgrown Ancient",
	"Algeth'ar Academy",
	"enUS",
	},
	[101438] = {
	"Vileshard Chunk",
	"Neltharion's Lair",
	},
	[194181] = {
	"Vexamus",
	"Algeth'ar Academy",
	"enUS",
	},
	[186125] = {
	"Tricktotem",
	"Brackenhide Hollow",
	"enUS",
	},
	[184335] = {
	"Infinite Agent",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[45924] = {
	"Turbulent Squall",
	"The Vortex Pinnacle",
	},
	[206074] = {
	"Pendule",
	"Dawn of the Infinite",
	"enUS",
	},
	[163620] = {
	"Rotspew",
	"The Necrotic Wake",
	},
	[205691] = {
	"Iridikron's Creation",
	"Dawn of the Infinite",
	"enUS",
	},
	[83025] = {
	"Grom'kar Battlemaster",
	"Iron Docks",
	},
	[179733] = {
	"Invigorating Fish Stick",
	"Tazavesh, the Veiled Market",
	},
	[163621] = {
	"Goregrind",
	"The Necrotic Wake",
	},
	[168992] = {
	"Risen Cultist",
	"De Other Side",
	},
	[196102] = {
	"Conjured Lasher",
	"The Azure Vault",
	"enUS",
	},
	[177816] = {
	"Interrogation Specialist",
	"Tazavesh, the Veiled Market",
	},
	[98243] = {
	"Soul-Torn Champion",
	"Black Rook Hold",
	"enUS",
	},
	[190348] = {
	"Primalist Ravager",
	"Halls of Infusion",
	"enUS",
	},
	[83026] = {
	"Siegemaster Olugar",
	"Iron Docks",
	},
	[40586] = {
	"Lady Naz'jar",
	"Throne of the Tides",
	"enUS",
	},
	[81236] = {
	"Grimrail Technician",
	"Grimrail Depot",
	},
	[177817] = {
	"Support Officer",
	"Tazavesh, the Veiled Market",
	},
	[82579] = {
	"Grom'kar Far Seer",
	"Grimrail Depot",
	},
	[131527] = {
	"Lord Waycrest",
	"Waycrest Manor",
	"enUS",
	},
	[165414] = {
	"Depraved Obliterator",
	"Halls of Atonement",
	},
	[193291] = {
	"Apex Blazewing",
	"Neltharus",
	"enUS",
	},
	[114804] = {
	"Spectral Charger",
	"Return to Karazhan",
	},
	[59544] = {
	"The Nodding Tiger",
	"Temple of the Jade Serpent",
	},
	[194315] = {
	"Stormcaller Solongo",
	"The Nokhud Offensive",
	"enUS",
	},
	[135365] = {
	"Matron Alma",
	"Waycrest Manor",
	"enUS",
	},
	[168357] = {
	"Zolramus Sorcerer",
	"The Necrotic Wake",
	},
	[187155] = {
	"Rune Seal Keeper",
	"The Azure Vault",
	"enUS",
	},
	[163882] = {
	"Decaying Flesh Giant",
	"Plaguefall",
	},
	[186644] = {
	"Leymor",
	"The Azure Vault",
	"enUS",
	},
	[164266] = {
	"Domina Venomblade",
	"Plaguefall",
	},
	[201222] = {
	"Valow, Timesworn Keeper",
	"Dawn of the Infinite",
	"enUS",
	},
	[173729] = {
	"Manifestation of Pride",
	"Theater of Pain",
	},
	[194317] = {
	"Stormcaller Boroo",
	"The Nokhud Offensive",
	"enUS",
	},
	[169893] = {
	"Nefarious Darkspeaker",
	"Theater of Pain",
	},
	[204931] = {
	"Fyrakk",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[201223] = {
	"Infinite Twilight Magus",
	"Dawn of the Infinite",
	"enUS",
	},
	[115765] = {
	"Abstract Nullifier",
	"Return to Karazhan",
	},
	[200840] = {
	"Flamebound Huntsman",
	"Aberrus, the Shadowed Crucible",
	"enUS",
	},
	[59545] = {
	"The Golden Beetle",
	"Temple of the Jade Serpent",
	},
	[102019] = {
	"Stormforged Obliterator",
	"Halls of Valor",
	},
	[133835] = {
	"Feral Bloodswarmer",
	"The Underrot",
	},
	[100485] = {
	"Soul-torn Vanguard",
	"Black Rook Hold",
	"enUS",
	},
	[192786] = {
	"Qalashi Plunderer",
	"Neltharus",
	"enUS",
	},
	[187160] = {
	"Crystal Fury",
	"The Azure Vault",
	"enUS",
	},
	[187033] = {
	"Stinkbreath",
	"Brackenhide Hollow",
	"enUS",
	},
	[100486] = {
	"Risen Arcanist",
	"Black Rook Hold",
	"enUS",
	},
	[146753] = {
	"Kul Tiran Marine",
	"Battle of Dazar'alor",
	},
	[101637] = {
	"Valarjar Aspirant",
	"Halls of Valor",
	},
	[102788] = {
	"Felspite Dominator",
	"Black Rook Hold",
	"enUS",
	},
	[189464] = {
	"Qalashi Irontorch",
	"Neltharus",
	"enUS",
	},
	[76446] = {
	"Shadowmoon Dominator",
	"Shadowmoon Burial Grounds",
	},
	[192789] = {
	"Nokhud Longbow",
	"The Nokhud Offensive",
	"enUS",
	},
	[138187] = {
	"Grotesque Horror",
	"The Underrot",
	},
	[135246] = {
	"\"Stabby\" Lottie",
	"Skittering Hollow (Islands 5)",
	},
	[197905] = {
	"Spellbound Scepter",
	"Algeth'ar Academy",
	},
	[131666] = {
	"Coven Thornshaper",
	"Waycrest Manor",
	"enUS",
	},
	[189466] = {
	"Irontorch Commander",
	"Neltharus",
	"enUS",
	},
	[45928] = {
	"Executor of the Caliph",
	"The Vortex Pinnacle",
	},
	[189722] = {
	"Gulping Goliath",
	"Halls of Infusion",
	"enUS",
	},
	[131667] = {
	"Soulbound Goliath",
	"Waycrest Manor",
	"enUS",
	},
	[190362] = {
	"Dazzling Dragonfly",
	"Halls of Infusion",
	"enUS",
	},
	[189467] = {
	"Qalashi Bonesplitter",
	"Neltharus",
	"enUS",
	},
	[189340] = {
	"Chargath, Bane of Scales",
	"Neltharus",
	"enUS",
	},
	[160495] = {
	"Maniacal Soulbinder",
	"Theater of Pain",
	},
	[162103] = {
	"Executor Tarvold",
	"Sanguine Depths",
	},
	[193944] = {
	"Qalashi Lavamancer",
	"Neltharus",
	"enUS",
	},
	[80816] = {
	"Ahri'ok Dugru",
	"Iron Docks",
	},
	[81819] = {
	"Everbloom Naturalist",
	"The Everbloom",
	"enUS",
	},
	[207796] = {
	"Burning Colossus",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[173655] = {
	"Mistveil Matriarch",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[163894] = {
	"Blighted Spinebreaker",
	"Plaguefall",
	},
	[113398] = {
	"Bloodtainted Fury",
	"Darkheart Thicket",
	"enUS",
	},
	[114319] = {
	"Lady Keira Berrybuck",
	"Return to Karazhan",
	},
	[129600] = {
	"Bilge Rat Brinescale",
	"Freehold",
	"enUS",
	},
	[131670] = {
	"Heartsbane Vinetwister",
	"Waycrest Manor",
	},
	[186227] = {
	"Monstrous Decay",
	"Brackenhide Hollow",
	"enUS",
	},
	[197398] = {
	"Hungry Lasher",
	"Algeth'ar Academy",
	"enUS",
	},
	[162744] = {
	"Nekthara the Mangler",
	"Theater of Pain",
	},
	[189470] = {
	"Lava Flare",
	"Neltharus",
	"enUS",
	},
	[187552] = {
	"Stormfang Shaman",
	"10.0 Dragon Isles",
	},
	[163128] = {
	"Zolramus Sorcerer",
	"The Necrotic Wake",
	},
	[163458] = {
	"Forsworn Castigator",
	"Spires of Ascension",
	},
	[165430] = {
	"Malignant Spawn",
	"Plaguefall",
	},
	[81820] = {
	"Everbloom Mender",
	"The Everbloom",
	"enUS",
	},
	[172312] = {
	"Spinemaw Gorger",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[98370] = {
	"Ghostly Councilor",
	"Black Rook Hold",
	"enUS",
	},
	[189471] = {
	"Qalashi Blacksmith",
	"Neltharus",
	"enUS",
	},
	[40935] = {
	"Gilgoblin Hunter",
	"Throne of the Tides",
	"enUS",
	},
	[192796] = {
	"Nokhud Hornsounder",
	"The Nokhud Offensive",
	"enUS",
	},
	[193293] = {
	"Qalashi Warden",
	"Neltharus",
	"enUS",
	},
	[206351] = {
	"Alliance Conjuror",
	"Dawn of the Infinite",
	"enUS",
	},
	[104246] = {
	"Duskwatch Guard",
	"Court of Stars",
	},
	[192481] = {
	"Decaying Slime",
	"Brackenhide Hollow",
	"enUS",
	},
	[177891] = {
	"Mawforged Summoner",
	"Sanctum of Domination",
	},
	[164920] = {
	"Drust Soulcleaver",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[190609] = {
	"Echo of Doragosa",
	"Algeth'ar Academy",
	"enUS",
	},
	[91001] = {
	"Tarspitter Lurker",
	"Neltharion's Lair",
	},
	[131545] = {
	"Lady Waycrest",
	"Waycrest Manor",
	"enUS",
	},
	[206352] = {
	"Alliance Archer",
	"Dawn of the Infinite",
	"enUS",
	},
	[163619] = {
	"Zolramus Bonecarver",
	"The Necrotic Wake",
	},
	[122971] = {
	"Dazar'ai Juggernaut",
	"Atal'Dazar",
	"enUS",
	},
	[190368] = {
	"Flamecaller Aymi",
	"Halls of Infusion",
	"enUS",
	},
	[199703] = {
	"Magma Mystic",
	"Aberrus, the Shadowed Crucible",
	"enUS",
	},
	[134284] = {
	"Fallen Deathspeaker",
	"The Underrot",
	},
	[163126] = {
	"Brittlebone Mage",
	"The Necrotic Wake",
	},
	[98696] = {
	"Illysanna Ravencrest",
	"Black Rook Hold",
	"enUS",
	},
	[171799] = {
	"Depths Warden",
	"Sanguine Depths",
	},
	[188067] = {
	"Flashfrost Chillweaver",
	"Ruby Life Pools",
	"enUS",
	},
	[213770] = {
	"Ink of Ozumat",
	"Throne of the Tides",
	"enUS",
	},
	[168886] = {
	"Virulax Blightweaver",
	"Plaguefall",
	},
	[171376] = {
	"Head Custodian Javlin",
	"Sanguine Depths",
	},
	[45930] = {
	"Minister of Air",
	"The Vortex Pinnacle",
	},
	[82039] = {
	"Rockspine Stinger",
	"The Everbloom",
	"enUS",
	},
	[131586] = {
	"Banquet Steward",
	"Waycrest Manor",
	"enUS",
	},
	[150297] = {
	"Mechagon Renormalizer",
	"Operation: Mechagon",
	},
	[40943] = {
	"Gilgoblin Aquamage",
	"Throne of the Tides",
	"enUS",
	},
	[200131] = {
	"Sha-Touched Guardian",
	"Temple of the Jade Serpent",
	"enUS",
	},
	[190370] = {
	"Squallbringer Cyraz",
	"Halls of Infusion",
	"enUS",
	},
	[165946] = {
	"Mordretha, the Endless Empress",
	"Theater of Pain",
	},
	[165919] = {
	"Skeletal Marauder",
	"The Necrotic Wake",
	},
	[192800] = {
	"Nokhud Lancemaster",
	"The Nokhud Offensive",
	"enUS",
	},
	[155434] = {
	"Emissary of the Tides",
	"Freehold",
	},
	[45704] = {
	"Lurking Tempest",
	"The Vortex Pinnacle",
	},
	[100527] = {
	"Dreadfire Imp",
	"Darkheart Thicket",
	"enUS",
	},
	[186151] = {
	"Balakar Khan",
	"The Nokhud Offensive",
	"enUS",
	},
	[148120] = {
	"Kul Tiran Marine",
	"Battle of Dazar'alor",
	},
	[98792] = {
	"Wyrmtongue Scavenger",
	"Black Rook Hold",
	"enUS",
	},
	[82590] = {
	"Grimrail Scout",
	"Grimrail Depot",
	},
	[201790] = {
	"Loszkeleth",
	"Dawn of the Infinite",
	"enUS",
	},
	[152009] = {
	"Malfunctioning Scrapbot",
	"Operation: Mechagon",
	},
	[131677] = {
	"Heartsbane Runeweaver",
	"Waycrest Manor",
	"enUS",
	},
	[194316] = {
	"Stormcaller Zarii",
	"The Nokhud Offensive",
	"enUS",
	},
	[196576] = {
	"Spellbound Scepter",
	"Algeth'ar Academy",
	"enUS",
	},
	[172981] = {
	"Kyrian Stitchwerk",
	"The Necrotic Wake",
	},
	[203799] = {
	"Horde Axe Thrower",
	"Dawn of the Infinite",
	"enUS",
	},
	[196671] = {
	"Arcane Ravager",
	"Algeth'ar Academy",
	"enUS",
	},
	[164926] = {
	"Drust Boughbreaker",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[168318] = {
	"Forsworn Goliath",
	"Spires of Ascension",
	},
	[164414] = {
	"Reanimated Mage",
	"The Necrotic Wake",
	},
	[192788] = {
	"Qalashi Thaumaturge",
	"Neltharus",
	"enUS",
	},
	[184107] = {
	"Runic Protector",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[190373] = {
	"Primalist Galesinger",
	"Halls of Infusion",
	"enUS",
	},
	[201754] = {
	"Sarkareth",
	"Aberrus, the Shadowed Crucible",
	"enUS",
	},
	[115020] = {
	"Arcanid",
	"Return to Karazhan",
	},
	[208365] = {
	"Aerwynn",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[197219] = {
	"Vile Lasher",
	"Algeth'ar Academy",
	"enUS",
	},
	[174773] = {
	"Spiteful Shade",
	"Darkheart Thicket",
	"enUS",
	},
	[167612] = {
	"Stoneborn Reaver",
	"Halls of Atonement",
	},
	[114624] = {
	"Arcane Warden",
	"Return to Karazhan",
	},
	[197535] = {
	"High Channeler Ryvati",
	"Ruby Life Pools",
	"enUS",
	},
	[200836] = {
	"Obsidian Guard",
	"Aberrus, the Shadowed Crucible",
	"enUS",
	},
	[195851] = {
	"Ukhel Deathspeaker",
	"The Nokhud Offensive",
	"enUS",
	},
	[184132] = {
	"Earthen Warder",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[198047] = {
	"Tempest Channeler",
	"Ruby Life Pools",
	"enUS",
	},
	[127111] = {
	"Irontide Oarsman",
	"Freehold",
	"enUS",
	},
	[104278] = {
	"Felbound Enforcer",
	"Court of Stars",
	},
	[84990] = {
	"Addled Arcanomancer",
	"The Everbloom",
	"enUS",
	},
	[191847] = {
	"Nokhud Plainstomper",
	"The Nokhud Offensive",
	"enUS",
	},
	[129699] = {
	"Ludwig Von Tortollan",
	"Freehold",
	},
	[95674] = {
	"Fenryr",
	"Halls of Valor",
	},
	[167533] = {
	"Advent Nevermore",
	"Theater of Pain",
	},
	[176565] = {
	"Disruptive Patron",
	"Tazavesh, the Veiled Market",
	},
	[205337] = {
	"Infinite Timebender",
	"Dawn of the Infinite",
	"enUS",
	},
	[212775] = {
	"Faceless Seer",
	"Throne of the Tides",
	"enUS",
	},
	[191164] = {
	"Arcane Tender",
	"The Azure Vault",
	"enUS",
	},
	[165824] = {
	"Nar'zudah",
	"The Necrotic Wake",
	},
	[164929] = {
	"Tirnenn Villager",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[162047] = {
	"Insatiable Brute",
	"Sanguine Depths",
	},
	[128455] = {
	"T'lonja",
	"Atal'Dazar",
	"enUS",
	},
	[192934] = {
	"Volatile Infuser",
	"Vault of the Incarnates",
	"enUS",
	},
	[81235] = {
	"Grimrail Laborer",
	"Grimrail Depot",
	},
	[184023] = {
	"Vicious Basilisk",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[113537] = {
	"Emberhusk Dominator",
	"Neltharion's Lair",
	},
	[190377] = {
	"Primalist Icecaller",
	"Halls of Infusion",
	"enUS",
	},
	[150295] = {
	"Tank Buster MK1",
	"Operation: Mechagon",
	},
	[126919] = {
	"Irontide Stormcaller",
	"Freehold",
	},
	[169861] = {
	"Ickor Bileflesh",
	"Plaguefall",
	},
	[84767] = {
	"Twisted Abomination",
	"The Everbloom",
	"enUS",
	},
	[196642] = {
	"Hungry Lasher",
	"Algeth'ar Academy",
	"enUS",
	},
	[163524] = {
	"Kyrian Dark-Praetor",
	"Spires of Ascension",
	},
	[189227] = {
	"Qalashi Hunter",
	"Neltharus",
	"enUS",
	},
	[205723] = {
	"Time-Lost Aerobot",
	"Dawn of the Infinite",
	"enUS",
	},
	[204206] = {
	"Horde Farseer",
	"Dawn of the Infinite",
	"enUS",
	},
	[192680] = {
	"Guardian Sentry",
	"Algeth'ar Academy",
	"enUS",
	},
	[102095] = {
	"Risen Lancer",
	"Black Rook Hold",
	"enUS",
	},
	[205212] = {
	"Infinite Keeper",
	"Dawn of the Infinite",
	"enUS",
	},
	[98970] = {
	"Latosius",
	"Black Rook Hold",
	"enUS",
	},
	[131812] = {
	"Heartsbane Soulcharmer",
	"Waycrest Manor",
	"enUS",
	},
	[129601] = {
	"Cutwater Harpooner",
	"Freehold",
	"enUS",
	},
	[164804] = {
	"Droman Oulfarran",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[164921] = {
	"Drust Harvester",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[187566] = {
	"Hyena Matriarch",
	"10.0 Dragon Isles",
	},
	[195878] = {
	"Ukhel Beastcaller",
	"The Nokhud Offensive",
	"enUS",
	},
	[163520] = {
	"Forsworn Squad-Leader",
	"Spires of Ascension",
	},
	[131685] = {
	"Runic Disciple",
	"Waycrest Manor",
	"enUS",
	},
	[102287] = {
	"Emberhusk Dominator",
	"Neltharion's Lair",
	},
	[92610] = {
	"Understone Drummer",
	"Neltharion's Lair",
	},
	[130404] = {
	"Vermin Trapper",
	"Freehold",
	"enUS",
	},
	[115419] = {
	"Ancient Tome",
	"Return to Karazhan",
	},
	[114526] = {
	"Ghostly Understudy",
	"Return to Karazhan",
	},
	[198995] = {
	"Chronikar",
	"Dawn of the Infinite",
	"enUS",
	},
	[135474] = {
	"Thistle Acolyte",
	"Waycrest Manor",
	"enUS",
	},
	[59546] = {
	"The Talking Fish",
	"Temple of the Jade Serpent",
	},
	[196263] = {
	"Nokhud Neophyte",
	"The Nokhud Offensive",
	"enUS",
	},
	[186124] = {
	"Gashtooth",
	"Brackenhide Hollow",
	"enUS",
	},
	[95766] = {
	"Crazed Razorbeak",
	"Darkheart Thicket",
	"enUS",
	},
	[131821] = {
	"Faceless Maiden",
	"Waycrest Manor",
	"enUS",
	},
	[199717] = {
	"Nokhud Defender",
	"The Nokhud Offensive",
	"enUS",
	},
	[101549] = {
	"Arcane Minion",
	"Black Rook Hold",
	"enUS",
	},
	[163891] = {
	"Rotmarrow Slime",
	"Plaguefall",
	},
	[104270] = {
	"Guardian Construct",
	"Court of Stars",
	},
	[206064] = {
	"Coalesced Moment",
	"Dawn of the Infinite",
	"enUS",
	},
	[114628] = {
	"Skeletal Waiter",
	"Return to Karazhan",
	},
	[205727] = {
	"Time-Lost Rocketeer",
	"Dawn of the Infinite",
	"enUS",
	},
	[197671] = {
	"Volatile Infuser",
	"Vault of the Incarnates",
	"enUS",
	},
	[131817] = {
	"Cragmaw the Infested",
	"The Underrot",
	},
	[95772] = {
	"Frenzied Nightclaw",
	"Darkheart Thicket",
	"enUS",
	},
	[59552] = {
	"The Crybaby Hozen",
	"Temple of the Jade Serpent",
	},
	[167493] = {
	"Venomous Sniper",
	"Plaguefall",
	},
	[170690] = {
	"Diseased Horror",
	"Theater of Pain",
	},
	[189232] = {
	"Kokia Blazehoof",
	"Ruby Life Pools",
	"enUS",
	},
	[162763] = {
	"Soulforged Bonereaver",
	"Theater of Pain",
	},
	[91000] = {
	"Vileshard Hulk",
	"Neltharion's Lair",
	},
	[179386] = {
	"Corsair Officer",
	"Tazavesh, the Veiled Market",
	},
	[95779] = {
	"Festerhide Grizzly",
	"Darkheart Thicket",
	"enUS",
	},
	[155090] = {
	"Anodized Coilbearer",
	"Operation: Mechagon",
	},
	[190342] = {
	"Containment Apparatus",
	"Halls of Infusion",
	"enUS",
	},
	[190128] = {
	"Zul'gamux",
	"Tazavesh, the Veiled Market",
	},
	[114629] = {
	"Spectral Retainer",
	"Return to Karazhan",
	},
	[126969] = {
	"Trothak",
	"Freehold",
	},
	[186420] = {
	"Earthen Weaver",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[167111] = {
	"Spinemaw Staghorn",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[196115] = {
	"Arcane Tender",
	"The Azure Vault",
	"enUS",
	},
	[98965] = {
	"Kur'talos Ravencrest",
	"Black Rook Hold",
	"enUS",
	},
	[195930] = {
	"Soulharvester Mandakh",
	"The Nokhud Offensive",
	"enUS",
	},
	[131818] = {
	"Marked Sister",
	"Waycrest Manor",
	},
	[84957] = {
	"Putrid Pyromancer",
	"The Everbloom",
	"enUS",
	},
	[76407] = {
	"Ner'zhul",
	"Shadowmoon Burial Grounds",
	},
	[82597] = {
	"Grom'kar Captain",
	"Grimrail Depot",
	},
	[179388] = {
	"Hourglass Tidesage",
	"Tazavesh, the Veiled Market",
	},
	[168942] = {
	"Death Speaker",
	"De Other Side",
	},
	[169927] = {
	"Putrid Butcher",
	"Theater of Pain",
	},
	[79720] = {
	"Grom'kar Boomer",
	"Grimrail Depot",
	},
	[77483] = {
	"Grom'kar Gunner",
	"Grimrail Depot",
	},
	[189235] = {
	"Overseer Lahar",
	"Neltharus",
	"enUS",
	},
	[80935] = {
	"Grom'kar Boomer",
	"Grimrail Depot",
	},
	[170850] = {
	"Raging Bloodhorn",
	"Theater of Pain",
	},
	[164557] = {
	"Shard of Halkias",
	"Halls of Atonement",
	},
	[131436] = {
	"Chosen Blood Matron",
	"The Underrot",
	},
	[59553] = {
	"The Songbird Queen",
	"Temple of the Jade Serpent",
	},
	[137830] = {
	"Pallid Gorger",
	"Waycrest Manor",
	"enUS",
	},
	[96664] = {
	"Valarjar Runecarver",
	"Halls of Valor",
	},
	[104273] = {
	"Jazshariu",
	"Court of Stars",
	},
	[95769] = {
	"Mindshattered Screecher",
	"Darkheart Thicket",
	"enUS",
	},
	[59873] = {
	"Corrupt Living Water",
	"Temple of the Jade Serpent",
	"enUS",
	},
	[185528] = {
	"Trickclaw Mystic",
	"Brackenhide Hollow",
	"enUS",
	},
	[185656] = {
	"Filth Caller",
	"Brackenhide Hollow",
	"enUS",
	},
	[168393] = {
	"Plaguebelcher",
	"Plaguefall",
	},
	[116549] = {
	"Backup Singer",
	"Return to Karazhan",
	},
	[80808] = {
	"Neesa Nox",
	"Iron Docks",
	},
	[77803] = {
	"Railmaster Rocketspark",
	"Grimrail Depot",
	},
	[80936] = {
	"Grom'kar Grenadier",
	"Grimrail Depot",
	},
	[133870] = {
	"Diseased Lasher",
	"The Underrot",
	},
	[185529] = {
	"Bracken Warscourge",
	"Brackenhide Hollow",
	"enUS",
	},
	[165197] = {
	"Skeletal Monstrosity",
	"The Necrotic Wake",
	},
	[193457] = {
	"Balara",
	"The Nokhud Offensive",
	"enUS",
	},
	[97197] = {
	"Valarjar Purifier",
	"Halls of Valor",
	},
	[83613] = {
	"Koramar",
	"Iron Docks",
	},
	[187192] = {
	"Rageclaw",
	"Brackenhide Hollow",
	"enUS",
	},
	[95834] = {
	"Valarjar Mystic",
	"Halls of Valor",
	},
	[40788] = {
	"Mindbender Ghur'sha",
	"Throne of the Tides",
	"enUS",
	},
	[45935] = {
	"Temple Adept",
	"The Vortex Pinnacle",
	},
	[111563] = {
	"Duskwatch Guard",
	"Court of Stars",
	},
	[189878] = {
	"Nathrezim Infiltrator",
	"Tazavesh, the Veiled Market",
	},
	[104274] = {
	"Baalgar the Watchful",
	"Court of Stars",
	},
	[131823] = {
	"Sister Malady",
	"Waycrest Manor",
	"enUS",
	},
	[114632] = {
	"Spectral Attendant",
	"Return to Karazhan",
	},
	[80937] = {
	"Grom'kar Gunner",
	"Grimrail Depot",
	},
	[114312] = {
	"Moroes",
	"Return to Karazhan",
	},
	[177787] = {
	"Mawsworn Hopebreaker",
	"Sanctum of Domination",
	},
	[167607] = {
	"Stoneborn Slasher",
	"Halls of Atonement",
	},
	[168396] = {
	"Plaguebelcher",
	"Plaguefall",
	},
	[86372] = {
	"Melded Berserker",
	"The Everbloom",
	"enUS",
	},
	[131824] = {
	"Sister Solena",
	"Waycrest Manor",
	"enUS",
	},
	[184125] = {
	"Chrono-Lord Deios",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[95771] = {
	"Dreadsoul Ruiner",
	"Darkheart Thicket",
	"enUS",
	},
	[167998] = {
	"Portal Guardian",
	"Theater of Pain",
	},
	[151773] = {
	"Junkyard D.0.G.",
	"Operation: Mechagon",
	},
	[194990] = {
	"Stormseeker Acolyte",
	"Vault of the Incarnates",
	"enUS",
	},
	[207969] = {
	"Horde Raider",
	"Dawn of the Infinite",
	"enUS",
	},
	[104275] = {
	"Imacu'tya",
	"Court of Stars",
	},
	[131825] = {
	"Sister Briar",
	"Waycrest Manor",
	"enUS",
	},
	[114633] = {
	"Spectral Valet",
	"Return to Karazhan",
	},
	[168627] = {
	"Plaguebinder",
	"Plaguefall",
	},
	[88163] = {
	"Grom'kar Cinderseer",
	"Grimrail Depot",
	},
	[197406] = {
	"Aggravated Skitterfly",
	"Algeth'ar Academy",
	"enUS",
	},
	[98521] = {
	"Lord Etheldrin Ravencrest",
	"Black Rook Hold",
	"enUS",
	},
	[164510] = {
	"Shambling Arbalest",
	"Theater of Pain",
	},
	[170572] = {
	"Atal'ai Hoodoo Hexxer",
	"De Other Side",
	},
	[164562] = {
	"Depraved Houndmaster",
	"Halls of Atonement",
	},
	[98706] = {
	"Commander Shemdah'sohn",
	"Black Rook Hold",
	"enUS",
	},
	[193462] = {
	"Batak",
	"The Nokhud Offensive",
	"enUS",
	},
	[167876] = {
	"Inquisitor Sigar",
	"Halls of Atonement",
	},
	[169905] = {
	"Risen Warlord",
	"De Other Side",
	},
	[150168] = {
	"Toxic Monstrosity",
	"Operation: Mechagon",
	},
	[40936] = {
	"Faceless Watcher",
	"Throne of the Tides",
	"enUS",
	},
	[184022] = {
	"Stonevault Geomancer",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[185680] = {
	"Vy Relic",
	"The Necrotic Wake",
	},
	[114634] = {
	"Undying Servant",
	"Return to Karazhan",
	},
	[196045] = {
	"Corrupted Manafiend",
	"Algeth'ar Academy",
	"enUS",
	},
	[179269] = {
	"Oasis Security",
	"Tazavesh, the Veiled Market",
	},
	[162689] = {
	"Surgeon Stitchflesh",
	"The Necrotic Wake",
	},
	[163157] = {
	"Amarth",
	"The Necrotic Wake",
	},
	[59555] = {
	"Haunting Sha",
	"Scarlet Monastery",
	"enUS",
	},
	[187154] = {
	"Unstable Curator",
	"The Azure Vault",
	"enUS",
	},
	[203678] = {
	"Grommash Hellscream",
	"Dawn of the Infinite",
	"enUS",
	},
	[40577] = {
	"Naz'jar Sentinel",
	"Throne of the Tides",
	"enUS",
	},
	[194487] = {
	"Vile Rothexer",
	"Brackenhide Hollow",
	"enUS",
	},
	[151649] = {
	"Defense Bot Mk I",
	"Operation: Mechagon",
	},
	[165076] = {
	"Gluttonous Tick",
	"Sanguine Depths",
	},
	[127879] = {
	"Shieldbearer of Zul",
	"Atal'Dazar",
	"enUS",
	},
	[129788] = {
	"Irontide Bonesaw",
	"Freehold",
	"enUS",
	},
	[114626] = {
	"Forlorn Spirit",
	"Return to Karazhan",
	},
	[97219] = {
	"Solsten",
	"Halls of Valor",
	},
	[184130] = {
	"Earthen Custodian",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[163459] = {
	"Forsworn Mender",
	"Spires of Ascension",
	},
	[128434] = {
	"Feasting Skyscreamer",
	"Atal'Dazar",
	"enUS",
	},
	[131318] = {
	"Elder Leaxa",
	"The Underrot",
	},
	[171343] = {
	"Bladebeak Matriarch",
	"De Other Side",
	},
	[200126] = {
	"Fallen Waterspeaker",
	"Scarlet Monastery",
	"enUS",
	},
	[173044] = {
	"Stitching Assistant",
	"The Necrotic Wake",
	},
	[168658] = {
	"Forsworn Devastator",
	"Spires of Ascension",
	},
	[184131] = {
	"Earthen Guardian",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[99192] = {
	"Shade of Xavius",
	"Darkheart Thicket",
	"enUS",
	},
	[98691] = {
	"Risen Scout",
	"Black Rook Hold",
	"enUS",
	},
	[114316] = {
	"Baroness Dorothea Millstipe",
	"Return to Karazhan",
	},
	[75506] = {
	"Shadowmoon Loyalist",
	"Shadowmoon Burial Grounds",
	},
	[174197] = {
	"Battlefield Ritualist",
	"Theater of Pain",
	},
	[102232] = {
	"Rockbound Trapper",
	"Neltharion's Lair",
	},
	[164567] = {
	"Ingra Maloch",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[114636] = {
	"Phantom Guardsman",
	"Return to Karazhan",
	},
	[146409] = {
	"Lady Jaina Proudmoore",
	"Battle of Dazar'alor",
	},
	[162691] = {
	"Blightbone",
	"The Necrotic Wake",
	},
	[166589] = {
	"Animated Weapon",
	"Sanguine Depths",
	},
	[114790] = {
	"Viz'aduum the Watcher",
	"Return to Karazhan",
	},
	[86526] = {
	"Grom'kar Chainmaster",
	"Iron Docks",
	},
	[187969] = {
	"Flashfrost Earthshaper",
	"Ruby Life Pools",
	"enUS",
	},
	[186658] = {
	"Stonevault Geomancer",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[189478] = {
	"Forgemaster Gorek",
	"Neltharus",
	"enUS",
	},
	[180335] = {
	"Cartel Smuggler",
	"Tazavesh, the Veiled Market",
	},
	[163121] = {
	"Stitched Vanguard",
	"The Necrotic Wake",
	},
	[114317] = {
	"Lady Catriona Von'Indi",
	"Return to Karazhan",
	},
	[164185] = {
	"Echelon",
	"Halls of Atonement",
	},
	[150253] = {
	"Weaponized Crawler",
	"Operation: Mechagon",
	},
	[167536] = {
	"Harugia the Bloodthirsty",
	"Theater of Pain",
	},
	[184300] = {
	"Ebonstone Golem",
	"Uldaman: Legacy of Tyr",
	"enUS",
	},
	[114637] = {
	"Spectral Sentry",
	"Return to Karazhan",
	},
	[135240] = {
	"Soul Essence",
	"Kul Tiras",
	"enUS",
	},
	[208438] = {
	"Infinite Saboteur",
	"Dawn of the Infinite",
	"enUS",
	},
	[205152] = {
	"Lerai, Timesworn Maiden",
	"Dawn of the Infinite",
	"enUS",
	},
	[214608] = {
	"Screaming Soul",
	"Amirdrassil, the Dream's Hope",
	"enUS",
	},
	[176396] = {
	"Defective Sorter",
	"Tazavesh, the Veiled Market",
	},
	[115418] = {
	"Spider",
	"Return to Karazhan",
	},
	[188011] = {
	"Primal Terrasentry",
	"Ruby Life Pools",
	"enUS",
	},
	[164506] = {
	"Ancient Captain",
	"Theater of Pain",
	},
	[150712] = {
	"Trixie Tazer",
	"Operation: Mechagon",
	},
	[129553] = {
	"Dinomancer Kish'o",
	"Atal'Dazar",
	"enUS",
	},
	[188244] = {
	"Primal Juggernaut",
	"Ruby Life Pools",
	"enUS",
	},
	[196200] = {
	"Algeth'ar Echoknight",
	"Algeth'ar Academy",
	"enUS",
	},
	[179842] = {
	"Commerce Enforcer",
	"Tazavesh, the Veiled Market",
	},
	[205363] = {
	"Time-Lost Waveshaper",
	"Dawn of the Infinite",
	"enUS",
	},
	[40634] = {
	"Naz'jar Tempest Witch",
	"Throne of the Tides",
	"enUS",
	},
	[39960] = {
	"Deep Murloc Drudge",
	"Throne of the Tides",
	"enUS",
	},
	[83893] = {
	"Earthshaper Telu",
	"The Everbloom",
	"enUS",
	},
	[196116] = {
	"Crystal Fury",
	"The Azure Vault",
	"enUS",
	},
	[127106] = {
	"Irontide Officer",
	"Freehold",
	},
	[189727] = {
	"Khajin the Unyielding",
	"Halls of Infusion",
	"enUS",
	},
	[189719] = {
	"Watcher Irideus",
	"Halls of Infusion",
	"enUS",
	},
	[173720] = {
	"Mistveil Gorgegullet",
	"Mists of Tirna Scithe",
	"enUS",
	},
	[150250] = {
	"Pistonhead Blaster",
	"Operation: Mechagon",
	},
	[189901] = {
	"Warlord Sargha",
	"Neltharus",
	"enUS",
	},
	[190403] = {
	"Glacial Proto-Dragon",
	"Halls of Infusion",
	"enUS",
	},
	[151657] = {
	"Bomb Tonk",
	"Operation: Mechagon",
	},
	[44404] = {
	"Naz'jar Frost Witch",
	"Throne of the Tides",
	"enUS",
	},
	[187139] = {
	"Crystal Thrasher",
	"The Azure Vault",
	"enUS",
	},
	[104217] = {
	"Talixae Flamewreath",
	"Court of Stars",
	},
	[195135] = {
	"Bracken Warscourge",
	"Brackenhide Hollow",
	"enUS",
	},
	[150251] = {
	"Pistonhead Mechanic",
	"Operation: Mechagon",
	},
	[195696] = {
	"Primalist Thunderbeast",
	"The Nokhud Offensive",
	"enUS",
	},
	},
	["aura_cooldown_reverse"] = false,
	["indicator_anchor"] = {
	["x"] = 0,
	},
	["health_selection_overlay_alpha"] = 1,
	["minor_height_scale"] = 0.9999999403953552,
	["aura_padding"] = 0,
	["last_news_time"] = 1550158598,
	["aura_width2"] = 22,
	["aura_stack_size"] = 8,
	["aura_show_crowdcontrol"] = true,
	["cast_colors"] = {
	[375727] = {
	true,
	"darkorange",
	"",
	},
	[369409] = {
	true,
	"darkorange",
	"",
	},
	[390111] = {
	true,
	"darkorange",
	"",
	},
	[369061] = {
	true,
	"darkorange",
	"",
	},
	[382555] = {
	true,
	"darkorange",
	"",
	},
	[381444] = {
	true,
	"darkorange",
	"",
	},
	[384524] = {
	true,
	"darkorange",
	"",
	},
	[376811] = {
	true,
	"darkorange",
	"",
	},
	[384336] = {
	true,
	"darkorange",
	"",
	},
	[377383] = {
	true,
	"darkorange",
	"",
	},
	[377034] = {
	true,
	"darkorange",
	"",
	},
	[369573] = {
	true,
	"darkorange",
	"",
	},
	[340300] = {
	true,
	"darkorange",
	"",
	},
	[385958] = {
	true,
	"darkorange",
	"",
	},
	[369703] = {
	true,
	"darkorange",
	"",
	},
	[388976] = {
	true,
	"darkorange",
	"",
	},
	[382277] = {
	true,
	"darkorange",
	"",
	},
	[387135] = {
	true,
	"darkorange",
	"",
	},
	[392406] = {
	true,
	"darkorange",
	"",
	},
	[386660] = {
	true,
	"darkorange",
	"",
	},
	[387614] = {
	true,
	"darkorange",
	"",
	},
	[372311] = {
	true,
	"darkorange",
	"",
	},
	[388060] = {
	true,
	"darkorange",
	"",
	},
	[373614] = {
	true,
	"darkorange",
	"",
	},
	[326021] = {
	true,
	"darkorange",
	"",
	},
	[374567] = {
	true,
	"darkorange",
	"",
	},
	[373742] = {
	true,
	"darkorange",
	"",
	},
	[377204] = {
	true,
	"darkorange",
	"",
	},
	[374569] = {
	true,
	"darkorange",
	"",
	},
	[372696] = {
	true,
	"darkorange",
	"",
	},
	[386063] = {
	true,
	"darkorange",
	"",
	},
	[321834] = {
	true,
	"darkorange",
	"",
	},
	[375079] = {
	true,
	"darkorange",
	"",
	},
	[372222] = {
	true,
	"darkorange",
	"",
	},
	[323137] = {
	true,
	"darkorange",
	"",
	},
	[393432] = {
	true,
	"darkorange",
	"",
	},
	[369811] = {
	true,
	"darkorange",
	"",
	},
	[390290] = {
	true,
	"darkorange",
	"",
	},
	[370764] = {
	true,
	"darkorange",
	"",
	},
	[377559] = {
	true,
	"darkorange",
	"",
	},
	[387910] = {
	true,
	"darkorange",
	"",
	},
	[388958] = {
	true,
	"darkorange",
	"",
	},
	[370766] = {
	true,
	"darkorange",
	"",
	},
	[391118] = {
	true,
	"darkorange",
	"",
	},
	[340160] = {
	true,
	"darkorange",
	"",
	},
	[385531] = {
	true,
	"darkorange",
	"",
	},
	[321968] = {
	true,
	"darkorange",
	"",
	},
	[373943] = {
	true,
	"darkorange",
	"",
	},
	[377912] = {
	true,
	"darkorange",
	"",
	},
	[387067] = {
	true,
	"darkorange",
	"",
	},
	[369563] = {
	true,
	"darkorange",
	"",
	},
	[324923] = {
	true,
	"darkorange",
	"",
	},
	[382708] = {
	true,
	"darkorange",
	"",
	},
	[331743] = {
	true,
	"darkorange",
	"",
	},
	[331718] = {
	true,
	"darkorange",
	"",
	},
	[375251] = {
	true,
	"darkorange",
	"",
	},
	[391726] = {
	true,
	"darkorange",
	"",
	},
	[385916] = {
	true,
	"darkorange",
	"",
	},
	[385578] = {
	true,
	"darkorange",
	"",
	},
	[382712] = {
	true,
	"darkorange",
	"",
	},
	[385832] = {
	true,
	"darkorange",
	"",
	},
	[391723] = {
	true,
	"darkorange",
	"",
	},
	[376170] = {
	true,
	"darkorange",
	"",
	},
	[388046] = {
	true,
	"darkorange",
	"",
	},
	[381834] = {
	true,
	"darkorange",
	"",
	},
	[374361] = {
	true,
	"darkorange",
	"",
	},
	[375351] = {
	true,
	"darkorange",
	"",
	},
	},
	["extra_icon_timer_outline"] = "OUTLINE",
	["aura_border_colors"] = {
	["enrage"] = {
	0,
	0,
	0,
	},
	["steal_or_purge"] = {
	0.27843137254902,
	0.92156862745098,
	0.98039215686275,
	},
	["offensive"] = {
	nil,
	0,
	0,
	},
	["crowdcontrol"] = {
	0,
	0,
	0,
	},
	["is_show_all"] = {
	0,
	0,
	0,
	},
	["defensive"] = {
	0,
	0,
	0,
	},
	["is_buff"] = {
	nil,
	0,
	0,
	},
	},
	["class_colors"] = {
	["DEATHKNIGHT"] = {
	["colorStr"] = "ffc31d3a",
	},
	["WARRIOR"] = {
	["colorStr"] = "ffc69a6d",
	},
	["PALADIN"] = {
	["colorStr"] = "fff48bb9",
	},
	["WARLOCK"] = {
	["colorStr"] = "ff8687ed",
	},
	["DEMONHUNTER"] = {
	["colorStr"] = "ffa22fc8",
	},
	["SHAMAN"] = {
	["colorStr"] = "ff006fdd",
	},
	["DRUID"] = {
	["colorStr"] = "ffff7c09",
	},
	["EVOKER"] = {
	["colorStr"] = "ff33937e",
	},
	["ROGUE"] = {
	["colorStr"] = "fffff467",
	},
	},
	["extra_icon_anchor"] = {
	["y"] = -13,
	["x"] = 0,
	["side"] = 8,
	},
	["extra_icon_wide_icon"] = false,
	["range_check_alpha"] = 1,
	["semver"] = "1.0.17",
	["aura_frame2_anchor"] = {
	["y"] = 1.009994506835938,
	["x"] = -0.80000305175781,
	["side"] = 1,
	},
	["cast_statusbar_texture"] = "Naowh Left",
	["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
	["debuff_show_cc"] = false,
	["transparency_behavior"] = 3,
	["spell_animations"] = false,
	["debuff_show_cc_border"] = {
	0,
	0,
	0,
	},
	["aura_consolidate"] = true,
	["extra_icon_width"] = 26,
	["health_statusbar_texture"] = "Naowh Left",
	["hook_auto_imported"] = {
	["Aura Reorder"] = 3,
	["Targetting Alpha"] = 3,
	["Dont Have Aura"] = 1,
	["Players Targetting Amount"] = 4,
	["Color Automation"] = 1,
	["Bwonsamdi Reaping"] = 1,
	["Attacking Specific Unit"] = 2,
	["Jaina Encounter"] = 6,
	["Blockade Encounter"] = 1,
	["Cast Bar Icon Config"] = 2,
	["Combo Points"] = 6,
	["Hide Neutral Units"] = 1,
	["Extra Border"] = 2,
	["Target Color"] = 3,
	["Execute Range"] = 1,
	["Reorder Nameplate"] = 4,
	},
	["minor_width_scale"] = 0.9999999403953552,
	["indicator_pet"] = false,
	["color_lerp_speed"] = 7,
	["aura_frame1_anchor"] = {
	["y"] = -0.600006103515625,
	["x"] = 0.5699920654296875,
	["side"] = 7,
	},
	["honor_blizzard_plate_alpha"] = true,
	["indicator_rare"] = false,
	["extra_icon_stack_font"] = "GothamNarrowUltra",
	["non_targeted_alpha_enabled"] = true,
	["cast_statusbar_bgtexture"] = "Naowh Left",
	["aura2_x_offset"] = -0.80000305175781,
	["target_indicator"] = "NONE",
	["saved_cvars"] = {
	["nameplateShowOnlyNames"] = "1",
	["nameplateOverlapV"] = "1.6000000238419",
	["ShowNamePlateLoseAggroFlash"] = "1",
	["nameplateShowEnemyMinus"] = "1",
	["NamePlateClassificationScale"] = "1",
	["nameplateShowFriendlyTotems"] = "0",
	["nameplatePersonalHideDelaySeconds"] = "0.2",
	["nameplateShowFriendlyPets"] = "0",
	["nameplateOverlapH"] = "1.1000000238419",
	["nameplatePersonalShowWithTarget"] = "0",
	["nameplateMinAlpha"] = "0.90135484",
	["nameplateResourceOnTarget"] = "0",
	["clampTargetNameplateToScreen"] = "1",
	["nameplateShowAll"] = "1",
	["nameplateMaxDistance"] = "100",
	["nameplateShowFriendlyMinions"] = "1",
	["nameplateSelfScale"] = "1",
	["nameplateTargetBehindMaxDistance"] = "30",
	["nameplateShowEnemies"] = "1",
	["NamePlateVerticalScale"] = "1",
	["nameplateSelectedAlpha"] = "1",
	["nameplateShowSelf"] = "0",
	["nameplatePersonalShowAlways"] = "0",
	["nameplateMotionSpeed"] = "0.014999999664724",
	["nameplateGlobalScale"] = "1",
	["nameplateShowEnemyMinions"] = "1",
	["nameplateShowEnemyPets"] = "0",
	["nameplateShowFriendlyNPCs"] = "0",
	["nameplateSelectedScale"] = "1.1000000238419",
	["nameplateTargetRadialPosition"] = "1",
	["nameplateShowFriends"] = "1",
	["nameplateMinAlphaDistance"] = "-158489.31924611",
	["nameplateMotion"] = "1",
	["NamePlateHorizontalScale"] = "1",
	["nameplateMinScale"] = "1",
	["nameplateShowEnemyGuardians"] = "0",
	["nameplateOtherTopInset"] = "0.0099999997764826",
	["nameplateOccludedAlphaMult"] = "0.4",
	["nameplateSelfBottomInset"] = "0.2",
	["nameplateShowEnemyTotems"] = "0",
	["nameplateShowFriendlyGuardians"] = "0",
	["nameplateSelfAlpha"] = "1",
	["nameplateSelfTopInset"] = "0.5",
	["nameplatePersonalShowInCombat"] = "1",
	["ShowClassColorInNameplate"] = "1",
	["nameplateLargeTopInset"] = "0.0099999997764826",
	},
	["login_counter"] = 40718,
	["extra_icon_caster_name"] = false,
	["aura_cooldown_show_swipe"] = false,
	["aura_stack_font"] = "Naowh",
	["auto_toggle_combat"] = {
	["blizz_healthbar_ic"] = true,
	["blizz_healthbar_ooc"] = true,
	},
	["hide_friendly_castbars"] = true,
	["OptionsPanelDB"] = {
	["PlaterOptionsPanelFrame"] = {
	["scale"] = 1,
	},
	},
	["auras_per_row_amount"] = 5,
	["aura_stack_anchor"] = {
	["y"] = -4.100000381469727,
	["x"] = 6.19999885559082,
	},
	["plate_config"] = {
	["player"] = {
	["spellpercent_text_font"] = "10089",
	["level_text_size"] = 11,
	["cast"] = {
	115,
	8,
	},
	["spellpercent_text_anchor"] = {
	["x"] = 2,
	["side"] = 5,
	},
	["big_actorname_text_shadow_color"] = {
	0,
	0,
	0,
	1,
	},
	["level_text_font"] = "10089",
	["actorname_text_font"] = "10089",
	["big_actorname_text_shadow_color_offset"] = {
	1,
	-1,
	},
	["mana_incombat"] = {
	100,
	4,
	},
	["all_names"] = true,
	["big_actortitle_text_outline"] = "OUTLINE",
	["actorname_text_spacing"] = 12,
	["quest_color_enemy"] = {
	1,
	0.369,
	0,
	},
	["big_actortitle_text_font"] = "10089",
	["spellpercent_text_size"] = 11,
	["big_actortitle_text_shadow_color_offset"] = {
	1,
	-1,
	},
	["power_percent_text_size"] = 8,
	["cast_incombat"] = {
	115,
	8,
	},
	["big_actorname_text_size"] = 10,
	["big_actortitle_text_size"] = 10,
	["spellname_text_anchor"] = {
	["side"] = 3,
	},
	["big_actortitle_text_shadow_color"] = {
	0,
	0,
	0,
	1,
	},
	["spellname_text_font"] = "10089",
	["big_actorname_text_outline"] = "OUTLINE",
	["quest_color_neutral"] = {
	1,
	0.65,
	0,
	},
	["actorname_text_size"] = 13,
	["big_actorname_text_font"] = "10089",
	["actorname_text_anchor"] = {
	["y"] = 1,
	["side"] = 1,
	},
	["percent_text_size"] = 11,
	["percent_text_font"] = "10089",
	["actorname_text_color"] = {
	nil,
	nil,
	nil,
	0.86789692938328,
	},
	["quest_enabled"] = true,
	["level_text_alpha"] = 1,
	["percent_text_color"] = {
	0.93725490196078,
	0.97647058823529,
	1,
	},
	["health_incombat"] = {
	115,
	15,
	},
	["health"] = {
	115,
	15,
	},
	["power_percent_text_font"] = "Accidental Presidency",
	["spellname_text_size"] = 12,
	["mana"] = {
	100,
	4,
	},
	["level_text_enabled"] = true,
	},
	["friendlyplayer"] = {
	["big_actorname_text_size"] = 9,
	["spellpercent_text_font"] = "AvantGarde",
	["level_text_size"] = 9,
	["actorname_use_class_color"] = true,
	["cast"] = {
	50,
	7,
	},
	["spellpercent_text_anchor"] = {
	["y"] = -7.980003356933594,
	["x"] = 1.009994506835938,
	},
	["spellname_text_outline"] = "OUTLINE",
	["big_actorname_text_shadow_color"] = {
	0,
	0,
	0,
	1,
	},
	["level_text_font"] = "AvantGarde",
	["percent_text_color"] = {
	0.93725490196078,
	0.97647058823529,
	1,
	},
	["actorname_text_font"] = "Naowh",
	["big_actorname_text_shadow_color_offset"] = {
	1,
	-1,
	},
	["mana_incombat"] = {
	nil,
	4,
	},
	["actorname_use_guild_color"] = false,
	["all_names"] = true,
	["big_actortitle_text_outline"] = "OUTLINE",
	["actorname_text_spacing"] = 9,
	["only_damaged"] = false,
	["quest_color_enemy"] = {
	1,
	0.369,
	0,
	},
	["only_thename"] = true,
	["big_actortitle_text_font"] = "AvantGarde",
	["spellpercent_text_size"] = 8,
	["level_text_anchor"] = {
	["y"] = 2.519996643066406,
	["x"] = 1.489997863769531,
	},
	["big_actortitle_text_shadow_color_offset"] = {
	1,
	-1,
	},
	["spellpercent_text_enabled"] = true,
	["cast_incombat"] = {
	105,
	7,
	},
	["actorname_text_shadow_color"] = {
	nil,
	nil,
	nil,
	0,
	},
	["spellname_text_anchor"] = {
	["y"] = -7.980003356933594,
	["x"] = -1.010002136230469,
	["side"] = 10,
	},
	["big_actortitle_text_shadow_color"] = {
	0,
	0,
	0,
	1,
	},
	["percent_text_anchor"] = {
	["y"] = -0.4000015258789063,
	["x"] = 0.04000091552734375,
	},
	["big_actortitle_text_size"] = 9,
	["spellname_text_font"] = "AvantGarde",
	["big_actorname_text_outline"] = "OUTLINE",
	["actorname_use_friends_color"] = false,
	["quest_color_neutral"] = {
	1,
	0.65,
	0,
	},
	["mana"] = {
	nil,
	4,
	},
	["power_percent_text_font"] = "Accidental Presidency",
	["actorname_text_anchor"] = {
	["y"] = 9.799995422363281,
	["x"] = -0.8300018310546875,
	["side"] = 9,
	},
	["percent_text_size"] = 8,
	["percent_text_ooc"] = true,
	["percent_text_font"] = "Naowh",
	["buff_frame_y_offset"] = 0,
	["quest_enabled"] = true,
	["percent_text_enabled"] = true,
	["actorname_text_color"] = {
	nil,
	nil,
	nil,
	0.87000000476837,
	},
	["spellname_text_size"] = 8,
	["health"] = {
	50,
	1,
	},
	["big_actorname_text_font"] = "AvantGarde",
	["health_incombat"] = {
	50,
	1,
	},
	["level_text_alpha"] = 1,
	},
	["friendlynpc"] = {
	["actorname_use_friends_color"] = true,
	["spellpercent_text_font"] = "Naowh",
	["actorname_friend_color"] = {
	0.71,
	1,
	1,
	1,
	},
	["level_text_size"] = 9,
	["actorname_use_class_color"] = false,
	["cast"] = {
	80,
	},
	["fixed_class_color"] = {
	0,
	1,
	0,
	},
	["spellpercent_text_anchor"] = {
	["y"] = -7.980003356933594,
	["x"] = 1.009994506835938,
	},
	["percent_text_show_decimals"] = false,
	["spellname_text_outline"] = "OUTLINE",
	["click_through"] = true,
	["level_text_font"] = "Naowh",
	["actorname_text_font"] = "Naowh",
	["actorname_use_guild_color"] = true,
	["actorname_text_outline"] = "OUTLINE",
	["actorname_text_spacing"] = 8,
	["only_damaged"] = false,
	["quest_color_enemy"] = {
	1,
	0.369,
	0,
	},
	["only_thename"] = true,
	["big_actortitle_text_font"] = "Naowh",
	["spellpercent_text_size"] = 8,
	["spellname_text_size"] = 9,
	["level_text_anchor"] = {
	["y"] = 2.519996643066406,
	["x"] = 1.489997863769531,
	},
	["cast_incombat"] = {
	80,
	10,
	},
	["show_guild_name"] = false,
	["actorname_text_shadow_color"] = {
	nil,
	nil,
	nil,
	0,
	},
	["spellname_text_anchor"] = {
	["y"] = -0.3800048828125,
	["x"] = 0.4899978637695313,
	["side"] = 10,
	},
	["percent_text_anchor"] = {
	["y"] = 4.699996948242188,
	["x"] = -0.3600006103515625,
	["side"] = 5,
	},
	["spellname_text_font"] = "Naowh",
	["only_names"] = false,
	["quest_color_neutral"] = {
	1,
	0.65,
	0,
	},
	["actorname_text_size"] = 9,
	["castbar_offset"] = -0.9000015258789062,
	["power_percent_text_font"] = "Accidental Presidency",
	["percent_text_ooc"] = true,
	["actorname_text_color"] = {
	nil,
	nil,
	nil,
	0.87000000476837,
	},
	["actorname_text_anchor"] = {
	["y"] = -3.800003051757813,
	},
	["percent_text_font"] = "Naowh",
	["actorname_guild_color"] = {
	0.498039,
	1,
	0.2,
	1,
	},
	["big_actortitle_text_size"] = 9,
	["health_incombat"] = {
	61,
	6,
	},
	["health"] = {
	61,
	6,
	},
	["level_text_alpha"] = 1,
	["percent_text_color"] = {
	0.93725490196078,
	0.97647058823529,
	1,
	},
	["big_actorname_text_font"] = "Naowh",
	},
	["global_health_height"] = 10,
	["global_health_width"] = 120,
	["enemyplayer"] = {
	["castbar_offset"] = -0.9000015258789062,
	["spellpercent_text_font"] = "Naowh",
	["cast"] = {
	120,
	14,
	},
	["spellpercent_text_anchor"] = {
	["y"] = 0.6699981689453125,
	["x"] = 0.0099945068359375,
	},
	["spellname_text_outline"] = "OUTLINE",
	["level_text_font"] = "Naowh",
	["actorname_text_font"] = "Naowh",
	["all_names"] = true,
	["actorname_text_outline"] = "OUTLINE",
	["actorname_text_spacing"] = 9,
	["quest_color_enemy"] = {
	1,
	0.369,
	0,
	1,
	},
	["big_actortitle_text_font"] = "Naowh",
	["spellpercent_text_size"] = 8,
	["level_text_anchor"] = {
	["y"] = 1.199996948242188,
	["x"] = -1,
	},
	["cast_incombat"] = {
	nil,
	14,
	},
	["spellname_text_anchor"] = {
	["y"] = -0.3800048828125,
	["x"] = 0.5,
	["side"] = 10,
	},
	["percent_text_anchor"] = {
	["y"] = -5.040000915527344,
	["x"] = -1,
	["side"] = 7,
	},
	["spellname_text_font"] = "Naowh",
	["percent_text_show_decimals"] = false,
	["quest_color_neutral"] = {
	1,
	0.65,
	0,
	1,
	},
	["actorname_text_size"] = 10,
	["big_actorname_text_font"] = "Naowh",
	["big_actortitle_text_size"] = 9,
	["level_text_outline"] = "OUTLINE",
	["percent_show_health"] = false,
	["spellpercent_text_enabled"] = false,
	["percent_text_font"] = "Naowh",
	["quest_enabled"] = true,
	["percent_text_color"] = {
	1,
	1,
	1,
	},
	["quest_color_enabled"] = true,
	["health_incombat"] = {
	nil,
	10,
	},
	["health"] = {
	120,
	10,
	},
	["power_percent_text_font"] = "Accidental Presidency",
	["actorname_text_anchor"] = {
	["y"] = -5,
	["x"] = 2,
	["side"] = 1,
	},
	["level_text_alpha"] = 1,
	["spellname_text_size"] = 9,
	["level_text_enabled"] = false,
	},
	["enemynpc"] = {
	["big_actorname_text_size"] = 9,
	["spellpercent_text_font"] = "Naowh",
	["level_text_size"] = 10,
	["cast"] = {
	120,
	12,
	},
	["spellpercent_text_anchor"] = {
	["y"] = 0.6699981689453125,
	["x"] = 0.0099945068359375,
	},
	["percent_text_show_decimals"] = false,
	["level_text_font"] = "Naowh",
	["percent_text_color"] = {
	1,
	1,
	1,
	},
	["actorname_text_font"] = "Naowh",
	["actorname_text_outline"] = "OUTLINE",
	["actorname_text_spacing"] = 9,
	["big_actortitle_text_font"] = "Naowh",
	["spellpercent_text_size"] = 8,
	["level_text_anchor"] = {
	["y"] = 1.199996948242188,
	["x"] = -1,
	},
	["cast_incombat"] = {
	nil,
	12,
	},
	["spellname_text_anchor"] = {
	["y"] = -0.279998779296875,
	["x"] = 0.5,
	["side"] = 10,
	},
	["percent_text_anchor"] = {
	["y"] = -5.040000915527344,
	["x"] = 0.5999984741210938,
	["side"] = 7,
	},
	["spellname_text_font"] = "Naowh",
	["actorname_text_size"] = 10,
	["big_actorname_text_font"] = "Naowh",
	["castbar_offset"] = -0.9000015258789062,
	["level_text_outline"] = "OUTLINE",
	["big_actortitle_text_size"] = 9,
	["actorname_text_anchor"] = {
	["y"] = -5,
	["x"] = 0.5999984741210938,
	["side"] = 1,
	},
	["spellpercent_text_enabled"] = false,
	["percent_text_font"] = "Naowh",
	["health_incombat"] = {
	nil,
	10,
	},
	["health"] = {
	120,
	10,
	},
	["spellname_text_size"] = 9,
	["power_percent_text_font"] = "Accidental Presidency",
	["percent_show_health"] = false,
	["level_text_alpha"] = 1,
	["level_text_enabled"] = false,
	},
	},
	["aura_y_offset"] = -0.600006103515625,
	["use_ui_parent"] = true,
	["cast_statusbar_bgcolor"] = {
	0.09803922474384308,
	0.09803922474384308,
	0.09803922474384308,
	0.7007235288619995,
	},
	["indicator_spec"] = false,
	["resources_settings"] = {
	["chr"] = {
	["Player-1305-0C8A40FF"] = "HolyPower",
	["Player-970-00A70C27"] = "Essence",
	["Player-970-00A567A0"] = "ComboPoints",
	["Player-1305-0C8B3F2E"] = "HolyPower",
	["Player-970-00A64901"] = "Runes",
	["Player-5765-00078091"] = "Runes",
	["Player-970-0096BE43"] = "ComboPoints",
	["Player-970-00AC349B"] = "ComboPoints",
	["Player-3674-0B3F8DA8"] = "ArcaneCharges",
	["Player-4184-003E01AD"] = "ComboPoints",
	["Player-4184-0023CCF5"] = "Runes",
	["Player-1305-0C8EAECF"] = "HolyPower",
	["Player-970-00875B07"] = "ComboPoints",
	["Player-1084-09F17E42"] = "Runes",
	["Player-4606-004CBC98"] = "Runes",
	["Player-1084-0A8EBA5D"] = "Chi",
	["Player-5765-00076D77"] = "ComboPoints",
	["Player-1084-0A7D9A76"] = "ComboPoints",
	["Player-970-00AC2EF5"] = "ComboPoints",
	["Player-4606-004E5C31"] = "HolyPower",
	["Player-970-00AC4486"] = "Runes",
	["Player-970-00A52063"] = "ComboPoints",
	["Player-1305-0C8E09A6"] = "Runes",
	["Player-5765-000D53A8"] = "HolyPower",
	["Player-1084-0A5FA399"] = "HolyPower",
	["Player-970-00AC37AD"] = "ComboPoints",
	["Player-4606-004CCC47"] = "Runes",
	["Player-4184-0042C8F4"] = "HolyPower",
	["Player-1084-0A698CF4"] = "Runes",
	["Player-4184-00427226"] = "ComboPoints",
	["Player-3657-0B09936A"] = "ComboPoints",
	["Player-1305-0CB01FD2"] = "Runes",
	["Player-1084-0A58A9E3"] = "SoulShards",
	["Player-1084-0A5C2A4F"] = "HolyPower",
	["Player-4606-004E4AA9"] = "Chi",
	["Player-970-00A6B1C5"] = "ComboPoints",
	["Player-4606-004BBAC3"] = "Runes",
	["Player-970-00A6DFCE"] = "ComboPoints",
	["Player-1084-0A867F11"] = "Runes",
	["Player-970-00A52221"] = "ComboPoints",
	["Player-970-007BE9B1"] = "Runes",
	["Player-970-00A6B1E1"] = "ComboPoints",
	["Player-1084-0A51CE7A"] = "ArcaneCharges",
	["Player-4606-0031416A"] = "ComboPoints",
	["Player-1084-0A804988"] = "Essence",
	["Player-970-00854F7F"] = "ComboPoints",
	["Player-1084-09F19274"] = "HolyPower",
	["Player-970-00881291"] = "ComboPoints",
	["Player-3674-09D96941"] = "Runes",
	["Player-970-00A60220"] = "ComboPoints",
	["Player-4184-004E68EF"] = "Essence",
	["Player-970-00A53D40"] = "ComboPoints",
	["Player-970-00AC4802"] = "ComboPoints",
	["Player-5765-00095A65"] = "HolyPower",
	["Player-970-00AC2600"] = "ComboPoints",
	["Player-4606-00264986"] = "HolyPower",
	["Player-1084-0961A181"] = "Runes",
	["Player-1305-0CD21673"] = "ComboPoints",
	["Player-970-00A56B4C"] = "ComboPoints",
	["Player-1084-0A24293C"] = "ComboPoints",
	["Player-4606-0030ACFA"] = "Runes",
	["Player-970-0085F079"] = "Runes",
	["Player-4606-0049FD3E"] = "Runes",
	["Player-4606-005181C7"] = "ComboPoints",
	["Player-970-00AC0987"] = "ComboPoints",
	["Player-970-00A522A0"] = "ComboPoints",
	["Player-4184-004D2CBC"] = "HolyPower",
	["Player-970-00A6B14F"] = "ComboPoints",
	["Player-970-00A6B1D4"] = "ComboPoints",
	["Player-4606-00518192"] = "ComboPoints",
	["Player-1305-0C92307D"] = "ComboPoints",
	["Player-1084-09D4BD91"] = "Chi",
	},
	},
	["spell_animation_list"] = {
	["30451"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 30451,
	["desc"] = "",
	},
	},
	["31661"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 1,
	["amplitude"] = 0.75,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 31661,
	["desc"] = "",
	},
	},
	["285452"] = {
	["1"] = {
	["scale_upY"] = 1,
	["scale_upX"] = 1.0199999809265,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.050000000745058,
	["scale_downY"] = 1,
	["scale_downX"] = 0.97999995946884,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "SHAMAN",
	["spellid"] = 285452,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.1799999922514,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["scaleY"] = -1,
	["amplitude"] = 5.6999998092651,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.050000000745058,
	["cooldown"] = 0.5,
	["frequency"] = 3.0999999046326,
	},
	},
	["2098"] = {
	["1"] = {
	["scale_upY"] = 1.1999999284744,
	["scale_upX"] = 1.1000000238419,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.04,
	["scale_downY"] = 0.89999997615814,
	["scale_downX"] = 0.89999997615814,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 1539293610,
	["class"] = "ROGUE",
	["spellid"] = 2098,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.079999998211861,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["scaleY"] = 1,
	["amplitude"] = 1.5,
	["fade_in"] = 0,
	["duration"] = 0.21999999880791,
	["cooldown"] = 0.5,
	["frequency"] = 2.710000038147,
	},
	},
	["184575"] = {
	["1"] = {
	["scale_upY"] = 1.05,
	["scale_upX"] = 1.05,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.95,
	["scale_downX"] = 0.95,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "PALADIN",
	["spellid"] = 184575,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["amplitude"] = 2,
	["critical_scale"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	},
	["185099"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.18999999761581,
	["absolute_sineX"] = false,
	["scaleY"] = 0.84999847412109,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["amplitude"] = 3,
	["critical_scale"] = 1.05,
	["fade_in"] = 0,
	["duration"] = 0.19999998807907,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539712435,
	["class"] = "MONK",
	["spellid"] = 185099,
	["desc"] = "",
	},
	},
	["198030"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 0.5,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.31999999284744,
	["cooldown"] = 0.5,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 1539717136,
	["class"] = "DEMONHUNTER",
	["spellid"] = 198030,
	["desc"] = "",
	},
	},
	["85948"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.019999999552965,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12000000476837,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "DEATHKNIGHT",
	["spellid"] = 85948,
	["desc"] = "",
	},
	},
	["35395"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "PALADIN",
	["spellid"] = 35395,
	["desc"] = "",
	},
	},
	["155166"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 0.6,
	["amplitude"] = 0.45,
	["fade_in"] = 0.01,
	["duration"] = 0.2,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "DEATHKNIGHT",
	["spellid"] = 155166,
	["desc"] = "",
	},
	},
	["228598"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 2,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 228598,
	["desc"] = "",
	},
	},
	["108853"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 108853,
	["desc"] = "",
	},
	},
	["205523"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 3,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.01,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539295885,
	["class"] = "MONK",
	["spellid"] = 205523,
	["desc"] = "",
	},
	},
	["245388"] = {
	["1"] = {
	["scale_upY"] = 1.1,
	["scale_upX"] = 1.1,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.03,
	["scale_downY"] = 0.9,
	["scale_downX"] = 0.9,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "ROGUE",
	["spellid"] = 245388,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["scaleY"] = 1,
	["amplitude"] = 5,
	["fade_in"] = 0.01,
	["duration"] = 0.06,
	["cooldown"] = 0.5,
	["frequency"] = 2,
	},
	},
	["6343"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 1,
	["amplitude"] = 0.95,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.1,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARRIOR",
	["spellid"] = 6343,
	["desc"] = "",
	},
	},
	["206930"] = {
	["1"] = {
	["scale_upY"] = 1,
	["scale_upX"] = 1.0199999809265,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.050000000745058,
	["scale_downY"] = 1,
	["scale_downX"] = 0.97999995946884,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "DEATHKNIGHT",
	["spellid"] = 222026,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.1799999922514,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["scaleY"] = -1,
	["amplitude"] = 5.6999998092651,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.050000000745058,
	["cooldown"] = 0.5,
	["frequency"] = 3.0999999046326,
	},
	},
	["199804"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 0.88999938964844,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["amplitude"] = 1.1699999570847,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.19999998807907,
	["cooldown"] = 0.5,
	["frequency"] = 23.525676727295,
	},
	["info"] = {
	["time"] = 1539293872,
	["class"] = "ROGUE",
	["spellid"] = 199804,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.0499999523163,
	["scale_upX"] = 1.0499999523163,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.050000000745058,
	["scale_downY"] = 1,
	["scale_downX"] = 1,
	["animation_type"] = "scale",
	},
	},
	["53595"] = {
	["1"] = {
	["scale_upY"] = 1.03,
	["scale_upX"] = 1.03,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.97,
	["scale_downX"] = 0.97,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "PALADIN",
	["spellid"] = 53595,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["amplitude"] = 3,
	["critical_scale"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	},
	["197834"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "ROGUE",
	["spellid"] = 197834,
	["desc"] = "",
	},
	},
	["265157"] = {
	["1"] = {
	["enabled"] = true,
	["scale_upX"] = 1,
	["duration"] = 0.096889182925224,
	["scale_downX"] = 1,
	["animation_type"] = "scale",
	["critical_scale"] = 1,
	["scale_downY"] = 0.89999997615814,
	["cooldown"] = 0.75,
	["scale_upY"] = 1.1000000238419,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "HUNTER",
	["spellid"] = 265157,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.019999999552965,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["amplitude"] = 0.50999999046326,
	["critical_scale"] = 1,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 39.995635986328,
	},
	},
	["7268"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 1,
	["amplitude"] = 0.75,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 7268,
	["desc"] = "",
	},
	},
	["100780"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["amplitude"] = 1,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.01,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539295910,
	["class"] = "MONK",
	["spellid"] = 100780,
	["desc"] = "",
	},
	},
	["5374"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "ROGUE",
	["spellid"] = 5374,
	["desc"] = "",
	},
	},
	["31935"] = {
	["1"] = {
	["scale_upY"] = 1.03,
	["scale_upX"] = 1.03,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.97,
	["scale_downX"] = 0.97,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "PALADIN",
	["spellid"] = 31935,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = true,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["amplitude"] = 6,
	["critical_scale"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	},
	["11366"] = {
	["1"] = {
	["scale_upY"] = 1.15,
	["scale_upX"] = 1.15,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.8,
	["scale_downX"] = 0.8,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 11366,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["amplitude"] = 10,
	["critical_scale"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	},
	["199552"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.099999994039536,
	["absolute_sineX"] = true,
	["scaleY"] = 0.79999923706055,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.20000076293945,
	["amplitude"] = 2.5,
	["critical_scale"] = 1.05,
	["fade_in"] = 0,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539717392,
	["class"] = "DEMONHUNTER",
	["spellid"] = 199552,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.0299999713898,
	["scale_upX"] = 1.0299999713898,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.96999996900559,
	["scale_downX"] = 0.96999996900559,
	["animation_type"] = "scale",
	},
	},
	["228600"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["amplitude"] = 10,
	["critical_scale"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 228600,
	["desc"] = "",
	},
	},
	["203782"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = true,
	["scaleY"] = -1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["amplitude"] = 1.5,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539716639,
	["class"] = "DEMONHUNTER",
	["spellid"] = 203782,
	["desc"] = "",
	},
	},
	["162243"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 1,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.099999994039535,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539717356,
	["class"] = "DEMONHUNTER",
	["spellid"] = 162243,
	["desc"] = "",
	},
	},
	["117418"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.1499999910593,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 0.1499999910593,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.1799999922514,
	["cooldown"] = 0.5,
	["frequency"] = 116.00999450684,
	},
	["info"] = {
	["time"] = 1539296387,
	["class"] = "MONK",
	["spellid"] = 117418,
	["desc"] = "",
	},
	},
	["204157"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["amplitude"] = 6,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539716637,
	["class"] = "DEMONHUNTER",
	["spellid"] = 204157,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.03,
	["scale_upX"] = 1.03,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.97,
	["scale_downX"] = 0.97,
	["animation_type"] = "scale",
	},
	},
	["222026"] = {
	["1"] = {
	["scale_upY"] = 1,
	["scale_upX"] = 1.0199999809265,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.050000000745058,
	["scale_downY"] = 1,
	["scale_downX"] = 0.97999995946884,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "DEATHKNIGHT",
	["spellid"] = 222026,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.1799999922514,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["scaleY"] = -1,
	["amplitude"] = 5.6999998092651,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.050000000745058,
	["cooldown"] = 0.5,
	["frequency"] = 3.0999999046326,
	},
	},
	["324540"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = false,
	["scaleY"] = 2,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 0.89999997615814,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.1499999910593,
	["cooldown"] = 0.5,
	["frequency"] = 25.650197982788,
	},
	["info"] = {
	["time"] = 1539292087,
	["class"] = "WARLOCK",
	["spellid"] = 324540,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.0299999713898,
	["scale_upX"] = 1.0299999713898,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.96999996900558,
	["scale_downX"] = 0.96999996900558,
	["animation_type"] = "scale",
	},
	},
	["264178"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.08,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 1,
	["amplitude"] = 2.5,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.25,
	["frequency"] = 20,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARLOCK",
	["spellid"] = 264178,
	["desc"] = "",
	},
	},
	["55090"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.1799999922514,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["scaleY"] = 1,
	["amplitude"] = 3.9020702838898,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.050000000745058,
	["cooldown"] = 0.5,
	["frequency"] = 3.7999999523163,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "DEATHKNIGHT",
	["spellid"] = 55090,
	["desc"] = "",
	},
	},
	["46968"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 0.95,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0.1,
	["frequency"] = 120,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARRIOR",
	["spellid"] = 46968,
	["desc"] = "",
	},
	},
	["148135"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["amplitude"] = 1.75,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.01,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 60.874122619629,
	},
	["info"] = {
	["time"] = 1539295958,
	["class"] = "MONK",
	["spellid"] = 148135,
	["desc"] = "",
	},
	},
	["257045"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 1,
	["amplitude"] = 0.75,
	["fade_in"] = 0.01,
	["duration"] = 0.1,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "HUNTER",
	["spellid"] = 257045,
	["desc"] = "",
	},
	},
	["228354"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 228354,
	["desc"] = "",
	},
	},
	["27285"] = {
	["1"] = {
	["scale_upY"] = 1.1,
	["scale_upX"] = 1.1,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.075,
	["scale_downY"] = 0.9,
	["scale_downX"] = 0.9,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARLOCK",
	["spellid"] = 27285,
	["desc"] = "",
	},
	},
	["53351"] = {
	["1"] = {
	["scale_upY"] = 1,
	["scale_upX"] = 1.0199999809265,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.050000000745058,
	["scale_downY"] = 1,
	["scale_downX"] = 0.97999995946884,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "HUNTER",
	["spellid"] = 53351,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.1799999922514,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["scaleY"] = -1,
	["amplitude"] = 5.6999998092651,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.050000000745058,
	["cooldown"] = 0.5,
	["frequency"] = 3.0999999046326,
	},
	},
	["44425"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "MAGE",
	["spellid"] = 44425,
	["desc"] = "",
	},
	},
	["185763"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.25999999046326,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 3.6583230495453,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.15999999642372,
	["cooldown"] = 0.5,
	["frequency"] = 23.525663375854,
	},
	["info"] = {
	["time"] = 1539275610,
	["class"] = "ROGUE",
	["spellid"] = 185763,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.0299999713898,
	["scale_upX"] = 1.0299999713898,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.96999996900559,
	["scale_downX"] = 0.96999996900559,
	["animation_type"] = "scale",
	},
	},
	["222024"] = {
	["1"] = {
	["enabled"] = true,
	["scale_upX"] = 1,
	["duration"] = 0.050000000745058,
	["scale_downX"] = 1,
	["animation_type"] = "scale",
	["critical_scale"] = 1,
	["scale_downY"] = 0.89999997615814,
	["cooldown"] = 0.75,
	["scale_upY"] = 1.1000000238419,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "DEATHKNIGHT",
	["spellid"] = 222024,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.019999999552965,
	["absolute_sineX"] = true,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["amplitude"] = 1.7999999523163,
	["critical_scale"] = 1,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.050000000745058,
	["cooldown"] = 0.5,
	["frequency"] = 11.14999961853,
	},
	},
	["107270"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 0.1499999910593,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.1499999910593,
	["cooldown"] = 0.5,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 1539296490,
	["class"] = "MONK",
	["spellid"] = 107270,
	["desc"] = "",
	},
	},
	["199547"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.59999847412109,
	["amplitude"] = 3,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539717795,
	["class"] = "DEMONHUNTER",
	["spellid"] = 199547,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.039999961853,
	["scale_upX"] = 1.039999961853,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.96999996900558,
	["scale_downX"] = 0.96999996900558,
	["animation_type"] = "scale",
	},
	},
	["17364"] = {
	["1"] = {
	["scale_upY"] = 1.02,
	["scale_upX"] = 1.02,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.10000000745058,
	["scale_downY"] = 0.97,
	["scale_downX"] = 0.97,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "SHAMAN",
	["spellid"] = 17364,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.11,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["scaleY"] = -1,
	["amplitude"] = 2.5,
	["fade_in"] = 0,
	["duration"] = 0.1,
	["cooldown"] = 0.5,
	["frequency"] = 3.0999999046326,
	},
	},
	["116858"] = {
	["1"] = {
	["enabled"] = true,
	["scale_upX"] = 1.0499999523163,
	["duration"] = 0.099999994039536,
	["scale_downX"] = 0.94999998807907,
	["animation_type"] = "scale",
	["critical_scale"] = 1,
	["scale_downY"] = 0.94999998807907,
	["cooldown"] = 0.75,
	["scale_upY"] = 1.0499999523163,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARLOCK",
	["spellid"] = 116858,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.099999994039536,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["scaleY"] = 4.9699974060059,
	["amplitude"] = 0.59999996423721,
	["fade_in"] = 0.049999997019768,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.25,
	["frequency"] = 2.8999998569489,
	},
	},
	["86040"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.1,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 2,
	["fade_in"] = 0.05,
	["duration"] = 0.15,
	["cooldown"] = 0.25,
	["frequency"] = 20,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARLOCK",
	["spellid"] = 86040,
	["desc"] = "",
	},
	},
	["49998"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.019999999552965,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["scaleY"] = 1,
	["amplitude"] = 1.0330086946487,
	["fade_in"] = 0.01,
	["duration"] = 0.050000000745058,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "DEATHKNIGHT",
	["spellid"] = 49998,
	["desc"] = "",
	},
	},
	["187708"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 0.6,
	["amplitude"] = 0.45,
	["fade_in"] = 0.01,
	["duration"] = 0.2,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "HUNTER",
	["spellid"] = 187708,
	["desc"] = "",
	},
	},
	["187874"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 0.6,
	["amplitude"] = 0.85,
	["fade_in"] = 0.01,
	["duration"] = 0.2,
	["cooldown"] = 0,
	["frequency"] = 100,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "SHAMAN",
	["spellid"] = 187874,
	["desc"] = "",
	},
	},
	["188443"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 0.6,
	["amplitude"] = 0.45,
	["fade_in"] = 0.01,
	["duration"] = 0.2,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "SHAMAN",
	["spellid"] = 188443,
	["desc"] = "",
	},
	},
	["189112"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.34999999403954,
	["absolute_sineX"] = true,
	["scaleY"] = 1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["amplitude"] = 1.8799999952316,
	["critical_scale"] = 1.05,
	["fade_in"] = 0,
	["duration"] = 0.40000000596046,
	["cooldown"] = 0.5,
	["frequency"] = 51.979999542236,
	},
	["info"] = {
	["time"] = 1539715467,
	["class"] = "DEMONHUNTER",
	["spellid"] = 189112,
	["desc"] = "",
	},
	},
	["32645"] = {
	["1"] = {
	["scale_upY"] = 1.1999999284744,
	["scale_upX"] = 1.1000000238419,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.04,
	["scale_downY"] = 0.89999997615814,
	["scale_downX"] = 0.89999997615814,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "ROGUE",
	["spellid"] = 32645,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.1799999922514,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["scaleY"] = 1,
	["amplitude"] = 4.0999999046326,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.12000000476837,
	["cooldown"] = 0.5,
	["frequency"] = 2.6099998950958,
	},
	},
	["280720"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.089999996125698,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["amplitude"] = 0.89999997615814,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.19999998807907,
	["cooldown"] = 0.5,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 1539292087,
	["class"] = "ROGUE",
	["spellid"] = 280720,
	["desc"] = "",
	},
	},
	["196278"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 1,
	["amplitude"] = 0.75,
	["fade_in"] = 0.01,
	["duration"] = 0.05,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARLOCK",
	["spellid"] = 196278,
	["desc"] = "",
	},
	},
	["52174"] = {
	["1"] = {
	["scale_upY"] = 1.15,
	["scale_upX"] = 1.15,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.075,
	["scale_downY"] = 0.8,
	["scale_downX"] = 0.8,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARRIOR",
	["spellid"] = 52174,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.2,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.15,
	["amplitude"] = 6,
	["critical_scale"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.3,
	["cooldown"] = 0.5,
	["frequency"] = 50,
	},
	},
	["196819"] = {
	["1"] = {
	["scale_upY"] = 1.2999999523163,
	["scale_upX"] = 1.1999999284744,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.04,
	["scale_downY"] = 0.89999997615814,
	["scale_downX"] = 0.89999997615814,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "ROGUE",
	["spellid"] = 196819,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.1799999922514,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["scaleY"] = 1,
	["amplitude"] = 5,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.21999999880791,
	["cooldown"] = 0.5,
	["frequency"] = 3.3099999427795,
	},
	},
	["8042"] = {
	["1"] = {
	["scale_upY"] = 1.05,
	["scale_upX"] = 1.05,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.060000000745058,
	["scale_downY"] = 0.95,
	["scale_downX"] = 0.95,
	["animation_type"] = "scale",
	},
	["info"] = {
	["time"] = 0,
	["class"] = "SHAMAN",
	["spellid"] = 285452,
	["desc"] = "",
	},
	["2"] = {
	["enabled"] = true,
	["fade_out"] = 0.05,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0,
	["scaleY"] = -1,
	["amplitude"] = 7.5,
	["fade_in"] = 0.0099999997764826,
	["duration"] = 0.06,
	["cooldown"] = 0.5,
	["frequency"] = 3.0999999046326,
	},
	},
	["20243"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = 1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "WARRIOR",
	["spellid"] = 20243,
	["desc"] = "",
	},
	},
	["2643"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.01,
	["absolute_sineX"] = false,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.2,
	["scaleY"] = 0.6,
	["amplitude"] = 0.45,
	["fade_in"] = 0.01,
	["duration"] = 0.2,
	["cooldown"] = 0,
	["frequency"] = 200,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "HUNTER",
	["spellid"] = 2643,
	["desc"] = "",
	},
	},
	["228478"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.099999994039536,
	["absolute_sineX"] = true,
	["scaleY"] = 0.79999923706055,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.20000076293945,
	["amplitude"] = 2.5,
	["critical_scale"] = 1.05,
	["fade_in"] = 0,
	["duration"] = 0.099999994039535,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539716636,
	["class"] = "DEMONHUNTER",
	["spellid"] = 228478,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.0299999713898,
	["scale_upX"] = 1.0299999713898,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.96999996900559,
	["scale_downX"] = 0.96999996900559,
	["animation_type"] = "scale",
	},
	},
	["275779"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.02,
	["absolute_sineX"] = false,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.1,
	["scaleY"] = -1,
	["amplitude"] = 1,
	["fade_in"] = 0.01,
	["duration"] = 0.12,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 0,
	["class"] = "PALADIN",
	["spellid"] = 275779,
	["desc"] = "",
	},
	},
	["100784"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.09,
	["absolute_sineX"] = false,
	["scaleY"] = 1,
	["absolute_sineY"] = false,
	["animation_type"] = "frameshake",
	["scaleX"] = 1,
	["amplitude"] = 3,
	["critical_scale"] = 1.05,
	["fade_in"] = 0.01,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 1,
	},
	["info"] = {
	["time"] = 1539296312,
	["class"] = "MONK",
	["spellid"] = 100784,
	["desc"] = "",
	},
	},
	["185438"] = {
	["1"] = {
	["enabled"] = true,
	["fade_out"] = 0.19999998807907,
	["absolute_sineX"] = false,
	["scaleY"] = -1,
	["absolute_sineY"] = true,
	["animation_type"] = "frameshake",
	["scaleX"] = 0.099998474121094,
	["amplitude"] = 6.460000038147,
	["critical_scale"] = 1.05,
	["fade_in"] = 0,
	["duration"] = 0.099999994039536,
	["cooldown"] = 0.5,
	["frequency"] = 25,
	},
	["info"] = {
	["time"] = 1539204014,
	["class"] = "ROGUE",
	["spellid"] = 185438,
	["desc"] = "",
	},
	["2"] = {
	["scale_upY"] = 1.0299999713898,
	["scale_upX"] = 1.0299999713898,
	["enabled"] = true,
	["cooldown"] = 0.75,
	["duration"] = 0.05,
	["scale_downY"] = 0.96999996900559,
	["scale_downX"] = 0.96999996900559,
	["animation_type"] = "scale",
	},
	},
	},
	["indicator_scale"] = 0.99999994039536,
	["cast_statusbar_spark_offset"] = -15,
	["castbar_icon_size"] = "same as castbar plus healthbar",
	["npc_colors"] = {
	[99358] = {
	true,
	false,
	"magenta",
	},
	[196798] = {
	true,
	false,
	"magenta",
	},
	[194241] = {
	true,
	false,
	"mediumslateblue",
	},
	[213806] = {
	true,
	false,
	"aqua",
	},
	[190405] = {
	true,
	false,
	"aqua",
	},
	[95842] = {
	true,
	false,
	"aqua",
	},
	[180431] = {
	true,
	false,
	"aqua",
	},
	[195265] = {
	true,
	false,
	"mediumslateblue",
	},
	[99359] = {
	true,
	false,
	"deepskyblue",
	},
	[184908] = {
	true,
	false,
	"magenta",
	},
	[150254] = {
	false,
	false,
	"aqua",
	},
	[173016] = {
	true,
	false,
	"aqua",
	},
	[129602] = {
	true,
	false,
	"mediumslateblue",
	},
	[180433] = {
	true,
	false,
	"orangered",
	},
	[209333] = {
	true,
	false,
	"mediumslateblue",
	},
	[120651] = {
	true,
	false,
	"darksalmon",
	},
	[197697] = {
	true,
	false,
	"magenta",
	},
	[40633] = {
	true,
	false,
	"deepskyblue",
	},
	[184910] = {
	true,
	false,
	"palegreen",
	},
	[178133] = {
	false,
	false,
	"aqua",
	},
	[201790] = {
	true,
	false,
	"mediumslateblue",
	},
	[40825] = {
	true,
	false,
	"mediumslateblue",
	},
	[131587] = {
	true,
	false,
	"deepskyblue",
	},
	[184911] = {
	true,
	false,
	"darksalmon",
	},
	[126918] = {
	true,
	false,
	"deepskyblue",
	},
	[196548] = {
	true,
	false,
	"aqua",
	},
	[135552] = {
	true,
	false,
	"deepskyblue",
	},
	[186191] = {
	true,
	false,
	"aqua",
	},
	[161895] = {
	true,
	false,
	"magenta",
	},
	[206140] = {
	true,
	false,
	"mediumslateblue",
	},
	[83761] = {
	true,
	false,
	"mediumslateblue",
	},
	[184018] = {
	true,
	false,
	"mediumslateblue",
	},
	[208698] = {
	true,
	false,
	"aqua",
	},
	[178392] = {
	true,
	false,
	"deepskyblue",
	},
	[168418] = {
	true,
	false,
	"aqua",
	},
	[200387] = {
	true,
	false,
	"mediumslateblue",
	},
	[199748] = {
	true,
	false,
	"aqua",
	},
	[165222] = {
	true,
	false,
	"aqua",
	},
	[184020] = {
	true,
	false,
	"deepskyblue",
	},
	[199749] = {
	true,
	false,
	"mediumslateblue",
	},
	[185683] = {
	true,
	false,
	"palegreen",
	},
	[168420] = {
	true,
	false,
	"aqua",
	},
	[208445] = {
	true,
	false,
	"mediumslateblue",
	},
	[192333] = {
	true,
	false,
	"aqua",
	},
	[174175] = {
	true,
	false,
	"deepskyblue",
	},
	[96934] = {
	true,
	false,
	"deepskyblue",
	},
	[83763] = {
	true,
	false,
	"deepskyblue",
	},
	[131849] = {
	true,
	false,
	"deepskyblue",
	},
	[189265] = {
	true,
	false,
	"aqua",
	},
	[185685] = {
	true,
	false,
	"darksalmon",
	},
	[184023] = {
	true,
	false,
	"aqua",
	},
	[178141] = {
	true,
	false,
	"deepskyblue",
	},
	[196044] = {
	true,
	false,
	"aqua",
	},
	[190034] = {
	true,
	false,
	"mediumslateblue",
	},
	[83892] = {
	true,
	false,
	"aqua",
	},
	[135048] = {
	true,
	false,
	"magenta",
	},
	[178142] = {
	true,
	false,
	"aqua",
	},
	[98406] = {
	true,
	false,
	"deepskyblue",
	},
	[194894] = {
	true,
	false,
	"aqua",
	},
	[200137] = {
	true,
	false,
	"aqua",
	},
	[194895] = {
	true,
	false,
	"magenta",
	},
	[83765] = {
	true,
	false,
	"aqua",
	},
	[168681] = {
	true,
	false,
	"mediumslateblue",
	},
	[99366] = {
	true,
	false,
	"aqua",
	},
	[101476] = {
	true,
	false,
	"magenta",
	},
	[209090] = {
	true,
	false,
	"mediumslateblue",
	},
	[177889] = {
	true,
	false,
	"mediumslateblue",
	},
	[187224] = {
	true,
	false,
	"mediumslateblue",
	},
	[154744] = {
	true,
	false,
	"mediumslateblue",
	},
	[83894] = {
	true,
	false,
	"mediumslateblue",
	},
	[98280] = {
	true,
	false,
	"aqua",
	},
	[194898] = {
	true,
	false,
	"deepskyblue",
	},
	[205384] = {
	true,
	false,
	"aqua",
	},
	[212673] = {
	true,
	false,
	"mediumslateblue",
	},
	[133007] = {
	true,
	false,
	"mediumslateblue",
	},
	[172265] = {
	true,
	false,
	"aqua",
	},
	[177892] = {
	true,
	false,
	"deepskyblue",
	},
	[165872] = {
	true,
	false,
	"deepskyblue",
	},
	[131858] = {
	true,
	false,
	"deepskyblue",
	},
	[129547] = {
	true,
	false,
	"mediumslateblue",
	},
	[45912] = {
	true,
	false,
	"aqua",
	},
	[207177] = {
	true,
	false,
	"mediumslateblue",
	},
	[127757] = {
	true,
	false,
	"mediumslateblue",
	},
	[40925] = {
	true,
	false,
	"mediumslateblue",
	},
	[89011] = {
	true,
	false,
	"aqua",
	},
	[188252] = {
	true,
	false,
	"mediumslateblue",
	},
	[189531] = {
	true,
	false,
	"deepskyblue",
	},
	[162038] = {
	true,
	false,
	"deepskyblue",
	},
	[98538] = {
	true,
	false,
	"mediumslateblue",
	},
	[150146] = {
	true,
	false,
	"aqua",
	},
	[137103] = {
	true,
	false,
	"deepskyblue",
	},
	[129548] = {
	true,
	false,
	"deepskyblue",
	},
	[101991] = {
	true,
	false,
	"aqua",
	},
	[162039] = {
	true,
	false,
	"aqua",
	},
	[82682] = {
	true,
	false,
	"mediumslateblue",
	},
	[97068] = {
	true,
	false,
	"mediumslateblue",
	},
	[75713] = {
	true,
	false,
	"aqua",
	},
	[186208] = {
	true,
	false,
	"mediumslateblue",
	},
	[162040] = {
	true,
	false,
	"deepskyblue",
	},
	[195927] = {
	true,
	false,
	"mediumslateblue",
	},
	[81212] = {
	true,
	false,
	"deepskyblue",
	},
	[150276] = {
	true,
	false,
	"deepskyblue",
	},
	[83578] = {
	true,
	false,
	"mediumslateblue",
	},
	[195928] = {
	true,
	false,
	"mediumslateblue",
	},
	[131863] = {
	true,
	false,
	"mediumslateblue",
	},
	[126928] = {
	false,
	false,
	"deepskyblue",
	},
	[203857] = {
	true,
	false,
	"aqua",
	},
	[197847] = {
	true,
	false,
	"deepskyblue",
	},
	[195929] = {
	true,
	false,
	"mediumslateblue",
	},
	[131864] = {
	true,
	false,
	"mediumslateblue",
	},
	[186339] = {
	true,
	false,
	"aqua",
	},
	[75459] = {
	true,
	false,
	"aqua",
	},
	[198999] = {
	true,
	false,
	"mediumslateblue",
	},
	[193373] = {
	true,
	false,
	"aqua",
	},
	[199000] = {
	true,
	false,
	"mediumslateblue",
	},
	[133912] = {
	true,
	false,
	"deepskyblue",
	},
	[75652] = {
	true,
	false,
	"mediumslateblue",
	},
	[134041] = {
	true,
	false,
	"deepskyblue",
	},
	[203861] = {
	true,
	false,
	"mediumslateblue",
	},
	[98542] = {
	true,
	false,
	"mediumslateblue",
	},
	[179821] = {
	true,
	false,
	"mediumslateblue",
	},
	[83389] = {
	true,
	false,
	"deepskyblue",
	},
	[81407] = {
	true,
	false,
	"deepskyblue",
	},
	[129552] = {
	true,
	false,
	"mediumslateblue",
	},
	[154758] = {
	true,
	false,
	"mediumslateblue",
	},
	[193760] = {
	true,
	false,
	"mediumslateblue",
	},
	[115486] = {
	true,
	false,
	"mediumslateblue",
	},
	[90998] = {
	true,
	false,
	"aqua",
	},
	[122967] = {
	true,
	false,
	"mediumslateblue",
	},
	[105704] = {
	true,
	false,
	"aqua",
	},
	[166396] = {
	true,
	false,
	"aqua",
	},
	[127315] = {
	true,
	false,
	"magenta",
	},
	[187240] = {
	true,
	false,
	"mediumslateblue",
	},
	[132126] = {
	true,
	false,
	"magenta",
	},
	[45915] = {
	true,
	false,
	"mediumslateblue",
	},
	[162049] = {
	true,
	false,
	"mediumslateblue",
	},
	[168443] = {
	true,
	false,
	"deepskyblue",
	},
	[77700] = {
	true,
	false,
	"aqua",
	},
	[84989] = {
	true,
	false,
	"deepskyblue",
	},
	[81984] = {
	true,
	false,
	"mediumslateblue",
	},
	[180336] = {
	true,
	false,
	"aqua",
	},
	[100526] = {
	true,
	false,
	"deepskyblue",
	},
	[105705] = {
	true,
	false,
	"magenta",
	},
	[170490] = {
	true,
	false,
	"aqua",
	},
	[168572] = {
	true,
	false,
	"deepskyblue",
	},
	[184301] = {
	true,
	false,
	"mediumslateblue",
	},
	[115488] = {
	true,
	false,
	"aqua",
	},
	[102253] = {
	true,
	false,
	"deepskyblue",
	},
	[97202] = {
	true,
	false,
	"aqua",
	},
	[186220] = {
	true,
	false,
	"aqua",
	},
	[81985] = {
	true,
	false,
	"aqua",
	},
	[122969] = {
	true,
	false,
	"aqua",
	},
	[200926] = {
	true,
	false,
	"mediumslateblue",
	},
	[197985] = {
	true,
	false,
	"aqua",
	},
	[168446] = {
	true,
	false,
	"mediumslateblue",
	},
	[150160] = {
	true,
	false,
	"mediumslateblue",
	},
	[83392] = {
	true,
	false,
	"mediumslateblue",
	},
	[162692] = {
	true,
	false,
	"deepskyblue",
	},
	[178165] = {
	true,
	false,
	"mediumslateblue",
	},
	[114338] = {
	true,
	false,
	"aqua",
	},
	[197219] = {
	true,
	false,
	"mediumslateblue",
	},
	[165762] = {
	true,
	false,
	"deepskyblue",
	},
	[131492] = {
	true,
	false,
	"aqua",
	},
	[76104] = {
	true,
	false,
	"aqua",
	},
	[81283] = {
	true,
	false,
	"aqua",
	},
	[187246] = {
	true,
	false,
	"deepskyblue",
	},
	[135329] = {
	true,
	false,
	"magenta",
	},
	[81603] = {
	true,
	false,
	"mediumslateblue",
	},
	[166275] = {
	true,
	false,
	"aqua",
	},
	[165764] = {
	true,
	false,
	"mediumslateblue",
	},
	[187503] = {
	true,
	false,
	"mediumslateblue",
	},
	[166276] = {
	true,
	false,
	"deepskyblue",
	},
	[168578] = {
	true,
	false,
	"aqua",
	},
	[150292] = {
	true,
	false,
	"mediumslateblue",
	},
	[45917] = {
	true,
	false,
	"deepskyblue",
	},
	[150165] = {
	true,
	false,
	"aqua",
	},
	[186226] = {
	true,
	false,
	"magenta",
	},
	[125977] = {
	true,
	false,
	"magenta",
	},
	[122972] = {
	true,
	false,
	"aqua",
	},
	[186738] = {
	true,
	false,
	"mediumslateblue",
	},
	[205408] = {
	true,
	false,
	"deepskyblue",
	},
	[170882] = {
	true,
	false,
	"aqua",
	},
	[186739] = {
	true,
	false,
	"mediumslateblue",
	},
	[196202] = {
	true,
	false,
	"aqua",
	},
	[103344] = {
	true,
	false,
	"mediumslateblue",
	},
	[122973] = {
	true,
	false,
	"magenta",
	},
	[100531] = {
	true,
	false,
	"mediumslateblue",
	},
	[196203] = {
	true,
	false,
	"deepskyblue",
	},
	[186229] = {
	true,
	false,
	"mediumslateblue",
	},
	[186741] = {
	true,
	false,
	"aqua",
	},
	[162317] = {
	true,
	false,
	"deepskyblue",
	},
	[150169] = {
	true,
	false,
	"deepskyblue",
	},
	[183033] = {
	true,
	false,
	"magenta",
	},
	[174210] = {
	true,
	false,
	"aqua",
	},
	[100532] = {
	true,
	false,
	"aqua",
	},
	[187510] = {
	true,
	false,
	"deepskyblue",
	},
	[163086] = {
	true,
	false,
	"deepskyblue",
	},
	[199659] = {
	true,
	false,
	"magenta",
	},
	[205158] = {
	true,
	false,
	"mediumslateblue",
	},
	[97720] = {
	true,
	false,
	"magenta",
	},
	[45919] = {
	true,
	false,
	"mediumslateblue",
	},
	[83846] = {
	true,
	false,
	"mediumslateblue",
	},
	[138281] = {
	true,
	false,
	"mediumslateblue",
	},
	[114792] = {
	true,
	false,
	"aqua",
	},
	[173447] = {
	false,
	false,
	"white",
	},
	[187897] = {
	true,
	false,
	"magenta",
	},
	[179841] = {
	true,
	false,
	"aqua",
	},
	[81737] = {
	true,
	false,
	"darksalmon",
	},
	[91008] = {
	true,
	false,
	"deepskyblue",
	},
	[168717] = {
	true,
	false,
	"deepskyblue",
	},
	[144293] = {
	true,
	false,
	"mediumslateblue",
	},
	[165137] = {
	true,
	false,
	"deepskyblue",
	},
	[168718] = {
	true,
	false,
	"aqua",
	},
	[144294] = {
	true,
	false,
	"aqua",
	},
	[183424] = {
	true,
	false,
	"aqua",
	},
	[144295] = {
	true,
	false,
	"aqua",
	},
	[183425] = {
	true,
	false,
	"deepskyblue",
	},
	[105715] = {
	true,
	false,
	"aqua",
	},
	[98810] = {
	true,
	false,
	"mediumslateblue",
	},
	[205804] = {
	true,
	false,
	"deepskyblue",
	},
	[179334] = {
	true,
	false,
	"mediumslateblue",
	},
	[130012] = {
	true,
	false,
	"magenta",
	},
	[163862] = {
	true,
	false,
	"deepskyblue",
	},
	[214117] = {
	true,
	false,
	"orangered",
	},
	[191739] = {
	true,
	false,
	"mediumslateblue",
	},
	[208363] = {
	true,
	false,
	"mediumslateblue",
	},
	[144298] = {
	true,
	false,
	"mediumslateblue",
	},
	[176395] = {
	true,
	false,
	"deepskyblue",
	},
	[133685] = {
	true,
	false,
	"deepskyblue",
	},
	[190206] = {
	true,
	false,
	"deepskyblue",
	},
	[184580] = {
	true,
	false,
	"aqua",
	},
	[96574] = {
	true,
	false,
	"mediumslateblue",
	},
	[190207] = {
	true,
	false,
	"aqua",
	},
	[184581] = {
	true,
	false,
	"mediumslateblue",
	},
	[104247] = {
	true,
	false,
	"aqua",
	},
	[130909] = {
	true,
	false,
	"deepskyblue",
	},
	[186116] = {
	true,
	false,
	"magenta",
	},
	[187523] = {
	true,
	false,
	"mediumslateblue",
	},
	[100539] = {
	true,
	false,
	"mediumslateblue",
	},
	[208367] = {
	true,
	false,
	"deepskyblue",
	},
	[165529] = {
	true,
	false,
	"aqua",
	},
	[98813] = {
	true,
	false,
	"aqua",
	},
	[206066] = {
	true,
	false,
	"aqua",
	},
	[114542] = {
	true,
	false,
	"mediumslateblue",
	},
	[186246] = {
	true,
	false,
	"aqua",
	},
	[115757] = {
	true,
	false,
	"mediumslateblue",
	},
	[96512] = {
	true,
	false,
	"mediumslateblue",
	},
	[96640] = {
	false,
	false,
	"mediumslateblue",
	},
	[206068] = {
	true,
	false,
	"deepskyblue",
	},
	[166299] = {
	true,
	false,
	"aqua",
	},
	[186120] = {
	true,
	false,
	"magenta",
	},
	[190340] = {
	true,
	false,
	"mediumslateblue",
	},
	[194816] = {
	true,
	false,
	"deepskyblue",
	},
	[164510] = {
	true,
	false,
	"deepskyblue",
	},
	[186121] = {
	true,
	false,
	"mediumslateblue",
	},
	[184331] = {
	true,
	false,
	"mediumslateblue",
	},
	[206070] = {
	true,
	false,
	"mediumslateblue",
	},
	[199037] = {
	true,
	false,
	"aqua",
	},
	[114544] = {
	true,
	false,
	"deepskyblue",
	},
	[186122] = {
	true,
	false,
	"mediumslateblue",
	},
	[199549] = {
	true,
	false,
	"deepskyblue",
	},
	[98368] = {
	true,
	false,
	"deepskyblue",
	},
	[122984] = {
	true,
	false,
	"mediumslateblue",
	},
	[41096] = {
	true,
	false,
	"aqua",
	},
	[166302] = {
	true,
	false,
	"aqua",
	},
	[81297] = {
	true,
	false,
	"deepskyblue",
	},
	[155433] = {
	false,
	false,
	"magenta",
	},
	[167965] = {
	true,
	false,
	"aqua",
	},
	[195842] = {
	true,
	false,
	"aqua",
	},
	[99200] = {
	true,
	false,
	"mediumslateblue",
	},
	[163618] = {
	true,
	false,
	"deepskyblue",
	},
	[196482] = {
	true,
	false,
	"mediumslateblue",
	},
	[101438] = {
	true,
	false,
	"aqua",
	},
	[186125] = {
	true,
	false,
	"aqua",
	},
	[184335] = {
	true,
	false,
	"aqua",
	},
	[45924] = {
	true,
	false,
	"deepskyblue",
	},
	[206074] = {
	true,
	false,
	"aqua",
	},
	[163620] = {
	true,
	false,
	"deepskyblue",
	},
	[205691] = {
	true,
	false,
	"aqua",
	},
	[83025] = {
	true,
	false,
	"mediumslateblue",
	},
	[179733] = {
	true,
	false,
	"orangered",
	},
	[163621] = {
	true,
	false,
	"deepskyblue",
	},
	[168992] = {
	true,
	false,
	"aqua",
	},
	[196102] = {
	true,
	false,
	"aqua",
	},
	[177816] = {
	true,
	false,
	"deepskyblue",
	},
	[98243] = {
	true,
	false,
	"mediumslateblue",
	},
	[190348] = {
	true,
	false,
	"deepskyblue",
	},
	[83026] = {
	true,
	false,
	"mediumslateblue",
	},
	[40586] = {
	true,
	false,
	"mediumslateblue",
	},
	[81236] = {
	true,
	false,
	"aqua",
	},
	[177817] = {
	true,
	false,
	"aqua",
	},
	[82579] = {
	true,
	false,
	"deepskyblue",
	},
	[131527] = {
	true,
	false,
	"mediumslateblue",
	},
	[165414] = {
	true,
	false,
	"aqua",
	},
	[193291] = {
	true,
	false,
	"magenta",
	},
	[114804] = {
	true,
	false,
	"aqua",
	},
	[59544] = {
	true,
	false,
	"aqua",
	},
	[194315] = {
	true,
	false,
	"mediumslateblue",
	},
	[135365] = {
	true,
	false,
	"mediumslateblue",
	},
	[168357] = {
	true,
	false,
	"aqua",
	},
	[187155] = {
	true,
	false,
	"aqua",
	},
	[163882] = {
	true,
	false,
	"deepskyblue",
	},
	[186644] = {
	true,
	false,
	"mediumslateblue",
	},
	[164266] = {
	true,
	false,
	"deepskyblue",
	},
	[201222] = {
	true,
	false,
	"mediumslateblue",
	},
	[173729] = {
	true,
	false,
	"mediumslateblue",
	},
	[194317] = {
	true,
	false,
	"mediumslateblue",
	},
	[169893] = {
	true,
	false,
	"mediumslateblue",
	},
	[204931] = {
	true,
	false,
	"mediumslateblue",
	},
	[201223] = {
	true,
	false,
	"aqua",
	},
	[115765] = {
	true,
	false,
	"deepskyblue",
	},
	[200840] = {
	true,
	false,
	"deepskyblue",
	},
	[59545] = {
	true,
	false,
	"deepskyblue",
	},
	[102019] = {
	true,
	false,
	"aqua",
	},
	[133835] = {
	true,
	false,
	"mediumslateblue",
	},
	[100485] = {
	true,
	false,
	"mediumslateblue",
	},
	[192786] = {
	true,
	false,
	"deepskyblue",
	},
	[187160] = {
	true,
	false,
	"deepskyblue",
	},
	[187033] = {
	true,
	false,
	"mediumslateblue",
	},
	[100486] = {
	true,
	false,
	"aqua",
	},
	[146753] = {
	false,
	false,
	"blue",
	},
	[101637] = {
	true,
	false,
	"deepskyblue",
	},
	[102788] = {
	true,
	false,
	"mediumslateblue",
	},
	[189464] = {
	true,
	false,
	"aqua",
	},
	[76446] = {
	true,
	false,
	"aqua",
	},
	[192789] = {
	true,
	false,
	"deepskyblue",
	},
	[138187] = {
	true,
	false,
	"aqua",
	},
	[135246] = {
	false,
	false,
	"white",
	},
	[197905] = {
	true,
	false,
	"deepskyblue",
	},
	[131666] = {
	true,
	false,
	"aqua",
	},
	[189466] = {
	true,
	false,
	"mediumslateblue",
	},
	[45928] = {
	true,
	false,
	"mediumslateblue",
	},
	[189722] = {
	true,
	false,
	"mediumslateblue",
	},
	[131667] = {
	true,
	false,
	"mediumslateblue",
	},
	[190362] = {
	true,
	false,
	"deepskyblue",
	},
	[189467] = {
	true,
	false,
	"deepskyblue",
	},
	[189340] = {
	true,
	false,
	"mediumslateblue",
	},
	[162103] = {
	true,
	false,
	"deepskyblue",
	},
	[193944] = {
	true,
	false,
	"aqua",
	},
	[81819] = {
	true,
	false,
	"deepskyblue",
	},
	[163894] = {
	true,
	false,
	"deepskyblue",
	},
	[131670] = {
	true,
	false,
	"mediumslateblue",
	},
	[197398] = {
	false,
	false,
	"aqua",
	},
	[162744] = {
	true,
	false,
	"deepskyblue",
	},
	[189470] = {
	true,
	false,
	"magenta",
	},
	[187552] = {
	true,
	false,
	"deepskyblue",
	},
	[163128] = {
	true,
	false,
	"aqua",
	},
	[165430] = {
	true,
	false,
	"deepskyblue",
	},
	[81820] = {
	true,
	false,
	"aqua",
	},
	[189471] = {
	true,
	false,
	"mediumslateblue",
	},
	[192796] = {
	true,
	false,
	"magenta",
	},
	[206351] = {
	true,
	false,
	"aqua",
	},
	[83893] = {
	true,
	false,
	"deepskyblue",
	},
	[164920] = {
	true,
	false,
	"deepskyblue",
	},
	[150251] = {
	true,
	false,
	"aqua",
	},
	[104300] = {
	true,
	false,
	"deepskyblue",
	},
	[131545] = {
	true,
	false,
	"aqua",
	},
	[206352] = {
	true,
	false,
	"deepskyblue",
	},
	[113398] = {
	true,
	false,
	"mediumslateblue",
	},
	[179842] = {
	true,
	false,
	"deepskyblue",
	},
	[190368] = {
	true,
	false,
	"aqua",
	},
	[199703] = {
	true,
	false,
	"aqua",
	},
	[44404] = {
	true,
	false,
	"aqua",
	},
	[151657] = {
	true,
	false,
	"aqua",
	},
	[163619] = {
	false,
	false,
	"white",
	},
	[150712] = {
	true,
	false,
	"aqua",
	},
	[188067] = {
	true,
	false,
	"aqua",
	},
	[213770] = {
	true,
	false,
	"mediumslateblue",
	},
	[168886] = {
	true,
	false,
	"deepskyblue",
	},
	[129553] = {
	true,
	false,
	"aqua",
	},
	[45930] = {
	true,
	false,
	"mediumslateblue",
	},
	[188011] = {
	true,
	false,
	"mediumslateblue",
	},
	[115418] = {
	true,
	false,
	"deepskyblue",
	},
	[176396] = {
	true,
	false,
	"mediumslateblue",
	},
	[40943] = {
	true,
	false,
	"aqua",
	},
	[40935] = {
	true,
	false,
	"deepskyblue",
	},
	[190370] = {
	true,
	false,
	"mediumslateblue",
	},
	[165946] = {
	true,
	false,
	"deepskyblue",
	},
	[205152] = {
	true,
	false,
	"mediumslateblue",
	},
	[192800] = {
	true,
	false,
	"aqua",
	},
	[208438] = {
	true,
	false,
	"mediumslateblue",
	},
	[122971] = {
	true,
	false,
	"deepskyblue",
	},
	[165919] = {
	true,
	false,
	"deepskyblue",
	},
	[186151] = {
	true,
	false,
	"mediumslateblue",
	},
	[171799] = {
	true,
	false,
	"deepskyblue",
	},
	[167536] = {
	true,
	false,
	"deepskyblue",
	},
	[82590] = {
	true,
	false,
	"magenta",
	},
	[150253] = {
	true,
	false,
	"mediumslateblue",
	},
	[152009] = {
	true,
	false,
	"deepskyblue",
	},
	[131677] = {
	true,
	false,
	"mediumslateblue",
	},
	[148120] = {
	false,
	false,
	"blue",
	},
	[98792] = {
	true,
	false,
	"deepskyblue",
	},
	[172981] = {
	true,
	false,
	"deepskyblue",
	},
	[203799] = {
	true,
	false,
	"deepskyblue",
	},
	[196576] = {
	true,
	false,
	"deepskyblue",
	},
	[163121] = {
	true,
	false,
	"deepskyblue",
	},
	[180335] = {
	true,
	false,
	"deepskyblue",
	},
	[164414] = {
	true,
	false,
	"aqua",
	},
	[201754] = {
	true,
	false,
	"deepskyblue",
	},
	[184107] = {
	true,
	false,
	"mediumslateblue",
	},
	[190373] = {
	true,
	false,
	"aqua",
	},
	[164926] = {
	true,
	false,
	"mediumslateblue",
	},
	[169861] = {
	true,
	false,
	"deepskyblue",
	},
	[186658] = {
	true,
	false,
	"aqua",
	},
	[86526] = {
	true,
	false,
	"deepskyblue",
	},
	[114790] = {
	true,
	false,
	"mediumslateblue",
	},
	[166589] = {
	true,
	false,
	"deepskyblue",
	},
	[114624] = {
	true,
	false,
	"aqua",
	},
	[197535] = {
	true,
	false,
	"mediumslateblue",
	},
	[162691] = {
	true,
	false,
	"mediumslateblue",
	},
	[82039] = {
	true,
	false,
	"magenta",
	},
	[200836] = {
	true,
	false,
	"deepskyblue",
	},
	[198047] = {
	true,
	false,
	"deepskyblue",
	},
	[128434] = {
	true,
	false,
	"magenta",
	},
	[195851] = {
	true,
	false,
	"deepskyblue",
	},
	[174197] = {
	true,
	false,
	"aqua",
	},
	[200131] = {
	true,
	false,
	"mediumslateblue",
	},
	[127111] = {
	true,
	false,
	"deepskyblue",
	},
	[84990] = {
	true,
	false,
	"aqua",
	},
	[98691] = {
	true,
	false,
	"deepskyblue",
	},
	[176565] = {
	true,
	false,
	"aqua",
	},
	[205337] = {
	true,
	false,
	"mediumslateblue",
	},
	[99192] = {
	true,
	false,
	"mediumslateblue",
	},
	[187969] = {
	true,
	false,
	"deepskyblue",
	},
	[165824] = {
	true,
	false,
	"mediumslateblue",
	},
	[164929] = {
	true,
	false,
	"mediumslateblue",
	},
	[173044] = {
	true,
	false,
	"aqua",
	},
	[200126] = {
	true,
	false,
	"aqua",
	},
	[192934] = {
	true,
	false,
	"mediumslateblue",
	},
	[162047] = {
	true,
	false,
	"deepskyblue",
	},
	[128455] = {
	true,
	false,
	"deepskyblue",
	},
	[100527] = {
	true,
	false,
	"magenta",
	},
	[190377] = {
	true,
	false,
	"deepskyblue",
	},
	[114636] = {
	true,
	false,
	"deepskyblue",
	},
	[163459] = {
	true,
	false,
	"aqua",
	},
	[102232] = {
	true,
	false,
	"aqua",
	},
	[84767] = {
	true,
	false,
	"mediumslateblue",
	},
	[97219] = {
	true,
	false,
	"mediumslateblue",
	},
	[163524] = {
	true,
	false,
	"mediumslateblue",
	},
	[114626] = {
	true,
	false,
	"aqua",
	},
	[205723] = {
	true,
	false,
	"deepskyblue",
	},
	[189227] = {
	true,
	false,
	"deepskyblue",
	},
	[129699] = {
	true,
	false,
	"magenta",
	},
	[127879] = {
	true,
	false,
	"deepskyblue",
	},
	[205212] = {
	true,
	false,
	"deepskyblue",
	},
	[40936] = {
	true,
	false,
	"mediumslateblue",
	},
	[131812] = {
	true,
	false,
	"mediumslateblue",
	},
	[184131] = {
	true,
	false,
	"magenta",
	},
	[164804] = {
	true,
	false,
	"mediumslateblue",
	},
	[168658] = {
	true,
	false,
	"deepskyblue",
	},
	[187566] = {
	true,
	false,
	"mediumslateblue",
	},
	[102095] = {
	true,
	false,
	"deepskyblue",
	},
	[40577] = {
	true,
	false,
	"mediumslateblue",
	},
	[131685] = {
	true,
	false,
	"aqua",
	},
	[102287] = {
	true,
	false,
	"mediumslateblue",
	},
	[203678] = {
	true,
	false,
	"mediumslateblue",
	},
	[185680] = {
	true,
	false,
	"magenta",
	},
	[196671] = {
	true,
	false,
	"mediumslateblue",
	},
	[92610] = {
	true,
	false,
	"magenta",
	},
	[162689] = {
	true,
	false,
	"deepskyblue",
	},
	[115419] = {
	true,
	false,
	"mediumslateblue",
	},
	[196045] = {
	true,
	false,
	"magenta",
	},
	[196263] = {
	true,
	false,
	"aqua",
	},
	[198995] = {
	true,
	false,
	"mediumslateblue",
	},
	[95766] = {
	true,
	false,
	"deepskyblue",
	},
	[129788] = {
	true,
	false,
	"aqua",
	},
	[184022] = {
	true,
	false,
	"aqua",
	},
	[165076] = {
	true,
	false,
	"aqua",
	},
	[205727] = {
	true,
	false,
	"aqua",
	},
	[104270] = {
	true,
	false,
	"aqua",
	},
	[199717] = {
	true,
	false,
	"mediumslateblue",
	},
	[114628] = {
	true,
	false,
	"magenta",
	},
	[167876] = {
	true,
	false,
	"deepskyblue",
	},
	[197671] = {
	true,
	false,
	"mediumslateblue",
	},
	[168627] = {
	true,
	false,
	"aqua",
	},
	[98706] = {
	true,
	false,
	"mediumslateblue",
	},
	[59552] = {
	true,
	false,
	"mediumslateblue",
	},
	[167493] = {
	true,
	false,
	"aqua",
	},
	[170690] = {
	true,
	false,
	"deepskyblue",
	},
	[189232] = {
	true,
	false,
	"mediumslateblue",
	},
	[101549] = {
	true,
	false,
	"magenta",
	},
	[81235] = {
	false,
	false,
	"white",
	},
	[179386] = {
	true,
	false,
	"deepskyblue",
	},
	[135474] = {
	true,
	false,
	"aqua",
	},
	[155090] = {
	true,
	false,
	"deepskyblue",
	},
	[190128] = {
	true,
	false,
	"darksalmon",
	},
	[131817] = {
	true,
	false,
	"magenta",
	},
	[114629] = {
	true,
	false,
	"deepskyblue",
	},
	[126969] = {
	true,
	false,
	"magenta",
	},
	[186420] = {
	true,
	false,
	"aqua",
	},
	[167111] = {
	true,
	false,
	"deepskyblue",
	},
	[164921] = {
	true,
	false,
	"aqua",
	},
	[95779] = {
	true,
	false,
	"mediumslateblue",
	},
	[59546] = {
	true,
	false,
	"aqua",
	},
	[131818] = {
	true,
	false,
	"magenta",
	},
	[190342] = {
	true,
	false,
	"aqua",
	},
	[82597] = {
	true,
	false,
	"mediumslateblue",
	},
	[179388] = {
	true,
	false,
	"aqua",
	},
	[98965] = {
	true,
	false,
	"mediumslateblue",
	},
	[168942] = {
	true,
	false,
	"deepskyblue",
	},
	[207969] = {
	true,
	false,
	"aqua",
	},
	[79720] = {
	true,
	false,
	"magenta",
	},
	[59553] = {
	true,
	false,
	"deepskyblue",
	},
	[189235] = {
	true,
	false,
	"mediumslateblue",
	},
	[80935] = {
	true,
	false,
	"magenta",
	},
	[193462] = {
	true,
	false,
	"aqua",
	},
	[95769] = {
	true,
	false,
	"aqua",
	},
	[131436] = {
	true,
	false,
	"mediumslateblue",
	},
	[194990] = {
	true,
	false,
	"aqua",
	},
	[137830] = {
	true,
	false,
	"aqua",
	},
	[96664] = {
	true,
	false,
	"aqua",
	},
	[164557] = {
	true,
	false,
	"deepskyblue",
	},
	[169927] = {
	true,
	false,
	"mediumslateblue",
	},
	[80936] = {
	false,
	false,
	"magenta",
	},
	[185528] = {
	true,
	false,
	"deepskyblue",
	},
	[185656] = {
	true,
	false,
	"deepskyblue",
	},
	[168393] = {
	true,
	false,
	"deepskyblue",
	},
	[104273] = {
	true,
	false,
	"deepskyblue",
	},
	[80808] = {
	true,
	false,
	"deepskyblue",
	},
	[77803] = {
	true,
	false,
	"deepskyblue",
	},
	[193457] = {
	true,
	false,
	"mediumslateblue",
	},
	[170850] = {
	true,
	false,
	"deepskyblue",
	},
	[185529] = {
	true,
	false,
	"aqua",
	},
	[165197] = {
	true,
	false,
	"mediumslateblue",
	},
	[167998] = {
	true,
	false,
	"deepskyblue",
	},
	[167607] = {
	true,
	false,
	"deepskyblue",
	},
	[177787] = {
	true,
	false,
	"aqua",
	},
	[207796] = {
	true,
	false,
	"orangered",
	},
	[45935] = {
	true,
	false,
	"aqua",
	},
	[40788] = {
	true,
	false,
	"orangered",
	},
	[114312] = {
	true,
	false,
	"mediumslateblue",
	},
	[111563] = {
	true,
	false,
	"deepskyblue",
	},
	[189878] = {
	true,
	false,
	"magenta",
	},
	[104274] = {
	true,
	false,
	"aqua",
	},
	[131823] = {
	true,
	false,
	"mediumslateblue",
	},
	[114632] = {
	true,
	false,
	"aqua",
	},
	[80937] = {
	true,
	false,
	"deepskyblue",
	},
	[83613] = {
	true,
	false,
	"mediumslateblue",
	},
	[97197] = {
	true,
	false,
	"aqua",
	},
	[133870] = {
	true,
	false,
	"aqua",
	},
	[168396] = {
	true,
	false,
	"deepskyblue",
	},
	[86372] = {
	true,
	false,
	"magenta",
	},
	[131824] = {
	true,
	false,
	"mediumslateblue",
	},
	[196116] = {
	true,
	false,
	"deepskyblue",
	},
	[95771] = {
	true,
	false,
	"magenta",
	},
	[76407] = {
	true,
	false,
	"mediumslateblue",
	},
	[151773] = {
	true,
	false,
	"deepskyblue",
	},
	[84957] = {
	true,
	false,
	"orangered",
	},
	[197406] = {
	true,
	false,
	"deepskyblue",
	},
	[104275] = {
	true,
	false,
	"mediumslateblue",
	},
	[131825] = {
	true,
	false,
	"mediumslateblue",
	},
	[114633] = {
	true,
	false,
	"deepskyblue",
	},
	[95834] = {
	true,
	false,
	"deepskyblue",
	},
	[88163] = {
	true,
	false,
	"mediumslateblue",
	},
	[91000] = {
	true,
	false,
	"mediumslateblue",
	},
	[98521] = {
	true,
	false,
	"mediumslateblue",
	},
	[206064] = {
	true,
	false,
	"aqua",
	},
	[170572] = {
	true,
	false,
	"aqua",
	},
	[164562] = {
	true,
	false,
	"deepskyblue",
	},
	[116549] = {
	true,
	false,
	"aqua",
	},
	[95772] = {
	true,
	false,
	"deepskyblue",
	},
	[77483] = {
	true,
	false,
	"deepskyblue",
	},
	[59873] = {
	true,
	false,
	"mediumslateblue",
	},
	[131821] = {
	true,
	false,
	"magenta",
	},
	[186124] = {
	true,
	false,
	"deepskyblue",
	},
	[196115] = {
	true,
	false,
	"mediumslateblue",
	},
	[130404] = {
	true,
	false,
	"mediumslateblue",
	},
	[114634] = {
	true,
	false,
	"mediumslateblue",
	},
	[163891] = {
	true,
	false,
	"aqua",
	},
	[179269] = {
	true,
	false,
	"deepskyblue",
	},
	[162763] = {
	true,
	false,
	"mediumslateblue",
	},
	[163157] = {
	true,
	false,
	"deepskyblue",
	},
	[59555] = {
	true,
	false,
	"aqua",
	},
	[167533] = {
	true,
	false,
	"deepskyblue",
	},
	[129601] = {
	true,
	false,
	"deepskyblue",
	},
	[191847] = {
	true,
	false,
	"aqua",
	},
	[194487] = {
	true,
	false,
	"mediumslateblue",
	},
	[151649] = {
	true,
	false,
	"deepskyblue",
	},
	[98970] = {
	true,
	false,
	"mediumslateblue",
	},
	[192788] = {
	true,
	false,
	"aqua",
	},
	[204206] = {
	true,
	false,
	"mediumslateblue",
	},
	[169905] = {
	true,
	false,
	"deepskyblue",
	},
	[114526] = {
	true,
	false,
	"aqua",
	},
	[130400] = {
	true,
	false,
	"mediumslateblue",
	},
	[168318] = {
	true,
	false,
	"deepskyblue",
	},
	[126919] = {
	true,
	false,
	"aqua",
	},
	[131318] = {
	true,
	false,
	"mediumslateblue",
	},
	[171343] = {
	true,
	false,
	"deepskyblue",
	},
	[167612] = {
	true,
	false,
	"aqua",
	},
	[163520] = {
	true,
	false,
	"deepskyblue",
	},
	[191164] = {
	true,
	false,
	"mediumslateblue",
	},
	[212775] = {
	true,
	false,
	"aqua",
	},
	[195878] = {
	true,
	false,
	"deepskyblue",
	},
	[187154] = {
	true,
	false,
	"mediumslateblue",
	},
	[114316] = {
	true,
	false,
	"aqua",
	},
	[75506] = {
	true,
	false,
	"deepskyblue",
	},
	[113537] = {
	true,
	false,
	"mediumslateblue",
	},
	[104278] = {
	true,
	false,
	"magenta",
	},
	[164567] = {
	true,
	false,
	"aqua",
	},
	[184132] = {
	true,
	false,
	"deepskyblue",
	},
	[146409] = {
	false,
	false,
	"darkgreen",
	},
	[45704] = {
	true,
	false,
	"magenta",
	},
	[197698] = {
	true,
	false,
	"magenta",
	},
	[155434] = {
	false,
	false,
	"violet",
	},
	[150168] = {
	true,
	false,
	"mediumslateblue",
	},
	[115020] = {
	true,
	false,
	"mediumslateblue",
	},
	[196642] = {
	false,
	false,
	"aqua",
	},
	[194316] = {
	true,
	false,
	"mediumslateblue",
	},
	[95674] = {
	true,
	false,
	"mediumslateblue",
	},
	[104246] = {
	true,
	false,
	"deepskyblue",
	},
	[114317] = {
	true,
	false,
	"aqua",
	},
	[164185] = {
	true,
	false,
	"deepskyblue",
	},
	[131850] = {
	true,
	false,
	"aqua",
	},
	[150297] = {
	true,
	false,
	"aqua",
	},
	[131586] = {
	true,
	false,
	"deepskyblue",
	},
	[114637] = {
	false,
	false,
	"deepskyblue",
	},
	[171376] = {
	true,
	false,
	"deepskyblue",
	},
	[174773] = {
	true,
	false,
	"magenta",
	},
	[208365] = {
	true,
	false,
	"palegreen",
	},
	[195696] = {
	true,
	false,
	"aqua",
	},
	[189478] = {
	true,
	false,
	"mediumslateblue",
	},
	[98696] = {
	true,
	false,
	"deepskyblue",
	},
	[160495] = {
	true,
	false,
	"aqua",
	},
	[163126] = {
	true,
	false,
	"aqua",
	},
	[134284] = {
	true,
	false,
	"aqua",
	},
	[184300] = {
	true,
	false,
	"mediumslateblue",
	},
	[91001] = {
	true,
	false,
	"magenta",
	},
	[135240] = {
	true,
	false,
	"aqua",
	},
	[177891] = {
	true,
	false,
	"deepskyblue",
	},
	[205363] = {
	true,
	false,
	"aqua",
	},
	[214608] = {
	true,
	false,
	"aqua",
	},
	[39960] = {
	false,
	false,
	"magenta",
	},
	[193293] = {
	true,
	false,
	"deepskyblue",
	},
	[195930] = {
	true,
	false,
	"mediumslateblue",
	},
	[127106] = {
	true,
	false,
	"mediumslateblue",
	},
	[98370] = {
	true,
	false,
	"aqua",
	},
	[164506] = {
	true,
	false,
	"mediumslateblue",
	},
	[163458] = {
	true,
	false,
	"aqua",
	},
	[150250] = {
	true,
	false,
	"deepskyblue",
	},
	[150295] = {
	true,
	false,
	"mediumslateblue",
	},
	[190403] = {
	true,
	false,
	"mediumslateblue",
	},
	[129600] = {
	true,
	false,
	"aqua",
	},
	[114319] = {
	true,
	false,
	"deepskyblue",
	},
	[40634] = {
	true,
	false,
	"magenta",
	},
	[104217] = {
	true,
	false,
	"mediumslateblue",
	},
	[195135] = {
	true,
	false,
	"aqua",
	},
	[80816] = {
	true,
	false,
	"aqua",
	},
	[192481] = {
	true,
	false,
	"aqua",
	},
	},
	["transparency_behavior_on_friendlies"] = true,
	["extra_icon_show_enrage_border"] = {
	0,
	0,
	0,
	},
	["cast_statusbar_spark_half"] = true,
	["hook_data"] = {
	{
	["Enabled"] = true,
	["Revision"] = 70,
	["OptionsValues"] = {
	},
	["LastHookEdited"] = "Constructor",
	["Author"] = "Izimode-Azralon",
	["Options"] = {
	},
	["Desc"] = "Change the color for the heal absorb, heal prediction and shield amount indicators.",
	["Hooks"] = {
	["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}           \n    \n    --make sure to enable the desired indicators at /plater options > Advanced tab > Show Heal/Shield Prediction\n    \n    --color when the heal absorb indicator\n    envTable.HealAbsorbColor = \"maroon\"\n    \n    --color of incoming heal indicator\n    envTable.IncomingHealColor = \"darkgreen\"\n    \n    --color of shield indicator\n    envTable.ShieldsColor = \"#C59000\"    \n    \nend\n\n\n",
	["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --heal absorb\n    unitFrame.healthBar.healAbsorbIndicator:SetVertexColor (DetailsFramework:ParseColors (envTable.HealAbsorbColor))\n    \n    --shield absorb\n    unitFrame.healthBar.shieldAbsorbIndicator:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldsColor))\n    \n    --incoming heal\n    unitFrame.healthBar.incomingHealIndicator:SetVertexColor (DetailsFramework:ParseColors (envTable.IncomingHealColor))\n    \nend\n\n\n",
	},
	["Prio"] = 99,
	["Name"] = "Change Prediction Color",
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["HooksTemp"] = {
	},
	["PlaterCore"] = 1,
	["Icon"] = 1035048,
	["Time"] = 1721752275,
	},
	{
	["Enabled"] = true,
	["Revision"] = 70,
	["OptionsValues"] = {
	},
	["LastHookEdited"] = "",
	["Author"] = "Izimode-Azralon",
	["Options"] = {
	},
	["Desc"] = "Adds a pixels perfect border around the cast bar.",
	["Hooks"] = {
	["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
	["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
	["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
	["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \n    --create thee border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end\n    \nend\n\n\n\n\n",
	},
	["Prio"] = 99,
	["Name"] = "Cast Bar Border",
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["HooksTemp"] = {
	},
	["PlaterCore"] = 1,
	["Icon"] = 133004,
	["Time"] = 1721752267,
	},
	{
	["OptionsValues"] = {
	},
	["HooksTemp"] = {
	},
	["Hooks"] = {
	["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckForQuest (unitFrame)\n    \nend\n\n\n",
	["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.ExtraQuestMarker22154:Hide()\n    \nend\n\n\n",
	["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckForQuest (unitFrame)\n    \nend\n\n\n",
	["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.ExtraQuestMarker22154) then\n        \n        unitFrame.ExtraQuestMarker22154:Hide()\n        \n    end    \n    \nend\n\n\n",
	["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.Texture = [[Interface\\OPTIONSFRAME\\UI-OptionsFrame-NewFeatureIcon]]\n    envTable.Size = 12\n    envTable.Anchor = {\n        side = 6, --right side\n        x = 2,\n        y = 0\n    }\n    \n    if (not unitFrame.ExtraQuestMarker22154) then\n        unitFrame.ExtraQuestMarker22154 = unitFrame:CreateTexture (nil, \"overlay\")\n        local texture = unitFrame.ExtraQuestMarker22154\n        \n        texture:SetTexture (envTable.Texture)\n        texture:SetSize (envTable.Size, envTable.Size)\n        Plater.SetAnchor (texture, envTable.Anchor)\n    end\n    \n    function envTable.CheckForQuest (unitFrame)\n        if (unitFrame.namePlateIsQuestObjective) then\n            unitFrame.ExtraQuestMarker22154:Show()\n            \n        else\n            unitFrame.ExtraQuestMarker22154:Hide()\n            \n        end\n    end\nend\n\n\n\n\n\n\n",
	},
	["Time"] = 1721752282,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "https://wago.io/platerquesticon/2",
	["Icon"] = "Interface\\OptionsFrame\\UI-OptionsFrame-NewFeatureIcon",
	["Enabled"] = true,
	["Revision"] = 41,
	["semver"] = "1.0.1",
	["Author"] = "Izimode-Azralon",
	["Desc"] = "Show an extra icon if the unit is a part of a quest you're current doing. You may adjust where the exclamation mark is shown in the Constructor.",
	["Prio"] = 99,
	["version"] = 2,
	["PlaterCore"] = 1,
	["Name"] = "Extra Quest Icon",
	["LastHookEdited"] = "",
	["Options"] = {
	},
	},
	{
	["OptionsValues"] = {
	},
	["HooksTemp"] = {
	},
	["Hooks"] = {
	["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [54983] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
	["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
	},
	["Time"] = 1721752253,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "",
	["Icon"] = -4972,
	["Enabled"] = true,
	["Revision"] = 375,
	["semver"] = "",
	["Author"] = "Kastfall-Azralon",
	["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
	["Prio"] = 99,
	["version"] = -1,
	["PlaterCore"] = 1,
	["Name"] = "Attacking Specific Unit [Plater]",
	["LastHookEdited"] = "Initialization",
	["Options"] = {
	{
	["Type"] = 1,
	["Key"] = "color",
	["Value"] = {
	0.50196078431373,
	0.50196078431373,
	0,
	1,
	},
	["Name"] = "Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "",
	},
	{
	["Type"] = 4,
	["Key"] = "changeBarColor",
	["Value"] = true,
	["Name"] = "Change Bar Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	{
	["Type"] = 4,
	["Key"] = "changeBorderColor",
	["Value"] = false,
	["Name"] = "Change Border Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	{
	["Type"] = 4,
	["Key"] = "resetColors",
	["Value"] = true,
	["Name"] = "Reset Colors",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	},
	},
	{
	["OptionsValues"] = {
	},
	["HooksTemp"] = {
	},
	["Hooks"] = {
	["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n",
	["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --percent of total cast bar size, default: 60% spell name\n    local spellNameSize = 0.60\n    \n    --update function\n    function envTable.UpdateCastBarName(unitId, castBar)\n        --do nothing if interrupted\n        if castBar.IsInterrupted then\n            return\n            \n        end\n        \n        --get the target's unitId \n        local targetUnitId = unitId .. \"target\"\n        \n        --does the unit exists?\n        if (UnitExists(targetUnitId)) then\n            \n            --get the target name\n            local targetName = UnitName(targetUnitId)\n            \n            --does the target name exists?\n            if (targetName) then\n                --get the current spell name\n                local spellName = castBar.SpellName\n                --reset the text in the cast bar\n                castBar.Text:SetText(spellName)\n                \n                --paint the target name with the player's class color\n                targetName = strsub(targetName, 1, 8)\n                local targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                \n                --castbar width\n                local castBarWidth = castBar:GetWidth()\n                DetailsFramework:TruncateText (castBar.Text, castBarWidth * spellNameSize)\n                \n                --set the new text in the castbar spell name fontstring\n                local currentText = castBar.Text:GetText()\n                currentText = strsub(currentText, 1, 8)\n                \n                if (currentText ~= nil and currentText ~= '') then \n                    castBar.Text:SetText(currentText .. \" - \" .. targetNameByColor)\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth)    \n                end                \n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
	},
	["Time"] = 1721752268,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "https://wago.io/VOuCDrV8Y/1",
	["Icon"] = 2126355,
	["Enabled"] = true,
	["Revision"] = 85,
	["semver"] = "1.0.0",
	["Author"] = "Izimode-Azralon",
	["Desc"] = "Show the cast target name with the spell name",
	["Prio"] = 99,
	["version"] = 1,
	["PlaterCore"] = 1,
	["Name"] = "Cast Target on Spell Name",
	["LastHookEdited"] = "",
	["Options"] = {
	},
	},
	{
	["OptionsValues"] = {
	},
	["HooksTemp"] = {
	},
	["Hooks"] = {
	["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- CONFIG TABLES\n    envTable.useRaidMarks = false\n    envTable.ColorByMark = {\n        \"gold\", --star\n        \"darkorange\", --circle\n        \"darkorchid\", --diamond\n        \"forestgreen\", --triangle\n        \"lightblue\", --moon\n        \"midnightblue\", --square\n        \"maroon\", --cross\n        \"ghostwhite\", --skull\n    }\n    \n    --[[\nSupports matching multiple auras to set a specific color.\nATTENTION: The first hit in the list will be used. So add your multi-matches to the top of the list!\n\nEach entry has the following format:\n        { \n            auras = {<auraID1>, <auraID2>, ..., <auraIDn>}, -- all aura-IDs which should be matched for the color. can be one to many auras\n            borderColor = \"violet\", -- the border color to be set (optional, can be removed)\n            nameplateColor = \"violet\", -- the nameplate color which should be set (optional, can be removed)\n        },\n\nColors can be either all /\"(plater colors\" as string or a color map {r,g,b,a} , e.g. {1,0.35,0}\n\nThe example below sets \"violet\" if moonfire and sunfire are active and \"orange\" for only sunfire or \"blue\" for only moonfire\n--]]\n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815}, --  moonfire + sunfire\n            borderColor = \"violet\",\n            nameplateColor = \"violet\",\n        },\n        { \n            auras = {188389}, -- Flame shock\n            nameplateColor = \"orange\",\n        },\n        { \n            auras = {164815}, -- sunfire\n            borderColor = \"orange\",\n            nameplateColor = \"orange\",\n        },\n        { \n            auras = {164812}, -- moonfire\n            borderColor = \"#00a3ff\",\n        },\n        { \n            auras = {396361}, -- AV Last Boss\n            nameplateColor = \"orange\",\n        },\n        { \n            auras = {278431}, -- Infest\n            nameplateColor = \"orange\",\n        },\n        { \n            auras = {200105}, -- Sacrifice Soul\n            nameplateColor = \"orange\",\n        },\n        { \n            auras = {201064}, -- Spinner boi\n            nameplateColor = \"magenta\",\n        },\n        { \n            auras = {200958}, -- Flame boi\n            nameplateColor = \"orange\",\n        },\n        { \n            auras = {412012}, -- Temposlice\n            nameplateColor = \"orange\",\n        },\n    }\n    \n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                    DF:SetFontColor (nameString, v.borderColor)\n                end\n                return\n            else\n                -- reset color\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"  then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                local nameString = unitFrame.healthBar.unitName\n                Plater.SetBorderColor (unitFrame)\n                DF:SetFontColor (nameString,{1,1,1})\n            end\n            \n        end\n    end\n    \n    -- Function to set Colors\n    function envTable. SetNameplateColors ()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark [raidMark])\n        else \n            local colored = envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
	},
	["Time"] = 1721752265,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "https://wago.io/398Lv0cuq/5",
	["Icon"] = 134563,
	["Enabled"] = true,
	["Revision"] = 287,
	["semver"] = "1.0.4",
	["Author"] = "Viashi-Antonidas",
	["Desc"] = "Change nameplate health bar, boder and name text color base on aura or raid mark.",
	["Prio"] = 20,
	["version"] = 5,
	["PlaterCore"] = 1,
	["Name"] = "AuraNameplateColors-v3",
	["LastHookEdited"] = "Constructor",
	["Options"] = {
	},
	},
	{
	["OptionsValues"] = {
	},
	["HooksTemp"] = {
	},
	["Hooks"] = {
	["Initialization"] = "function (modTable)\n    local npctable = {\n        [61146] = true,\n        [103822] = true,\n        [15352] = true,\n        [95072] = true,\n        [61056] = true,\n    }\n    \n    function modTable.UpdateColor (unitFrame, unitId)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        if  InCombatLockdown() and unitFrame.InCombat then\n            if modTable.config.recolor then\n                local targetGUID = UnitGUID (unitFrame.targetUnitID)\n                if targetGUID then\n                    local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n                    if npctable[npcID] then\n                        Plater.SetNameplateColor (unitFrame, modTable.config.color)\n                        return\n                    end\n                end\n            end            \n            if unitFrame.namePlateThreatIsTanking and not Plater.PlayerIsTank then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n                return\n            elseif (not unitFrame.namePlateThreatIsTanking) and Plater.PlayerIsTank and not UnitIsUnit(unitFrame.targetUnitID, \"player\") then\n                local tanks = Plater.GetTanks()\n                local unitTargetName = UnitName(unitFrame.targetUnitID)\n                if tanks [unitTargetName] then\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.anothertank)\n                elseif UnitExists(unitTargetName) then\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n                return\n            end\n        end\n    end\nend",
	["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateColor (unitFrame, unitId)\nend",
	},
	["Time"] = 1721752342,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	["Enabled"] = true,
	["party"] = true,
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "https://wago.io/N-Hb07L7A/9",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
	["Enabled"] = true,
	["Revision"] = 1034,
	["semver"] = "1.0.8",
	["Author"] = "Viash-Thrall",
	["Desc"] = "Overrides NPC Color with the Threat Color if you pull threat as dps or lose threat as tank",
	["Prio"] = 1,
	["version"] = 9,
	["PlaterCore"] = 1,
	["Name"] = "NPC Color Override",
	["LastHookEdited"] = "Initialization",
	["Options"] = {
	{
	["Type"] = 4,
	["Key"] = "recolor",
	["Value"] = true,
	["Name"] = "Recolor if enemy is attacking Statue/Treant/Earth Elemental",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Key"] = "color",
	["Value"] = {
	1,
	1,
	1,
	1,
	},
	["Name"] = "Color",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "",
	},
	},
	},
	{
	["OptionsValues"] = {
	["lowScale"] = 0.00791503768414259,
	["midScale"] = 0.6983148455619812,
	},
	["HooksTemp"] = {
	},
	["UID"] = "0x6366dbeb1fda6285",
	["Hooks"] = {
	["Leave Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
	["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
	["Initialization"] = "function (modTable)\n    \n    -- 1 = mid prio, 2 = low prio\n    \n    modTable[\"npcIDs\"] = {\n        \n        -- Dawn of the Infinite\n        [\"202789\"] = 1, -- Morchie Intermission\n        [\"204536\"] = 1, -- Blight Chunk\n        [\"40923\"] = 1, -- Unstable Corruption\n        [\"211306\"] = 1, -- Vines\n        \n    }\n    \nend",
	},
	["Time"] = 1721752355,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	["Enabled"] = true,
	["party"] = true,
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "https://wago.io/Ru_9FLVjI/24",
	["Icon"] = 1041231,
	["Enabled"] = true,
	["Revision"] = 2370,
	["semver"] = "1.0.23",
	["Author"] = "Causese-Valdrakken",
	["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
	["Prio"] = 99,
	["version"] = 24,
	["PlaterCore"] = 1,
	["LastHookEdited"] = "Initialization",
	["Options"] = {
	{
	["Type"] = 4,
	["Key"] = "scale",
	["Value"] = true,
	["Name"] = "Enable Scaling",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "Allows nameplates to scale based on priority.",
	},
	{
	["Type"] = 2,
	["Max"] = 1,
	["Desc"] = "Set scaling value for mid priority.",
	["Min"] = 0,
	["Fraction"] = true,
	["Value"] = 0.75,
	["Key"] = "midScale",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
	["Name"] = "Mid prio",
	},
	{
	["Type"] = 2,
	["Max"] = 1,
	["Desc"] = "Set scaling value for low priority.",
	["Min"] = 0,
	["Fraction"] = true,
	["Value"] = 0.5,
	["Key"] = "lowScale",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
	["Name"] = "Low prio",
	},
	{
	["Type"] = 4,
	["Key"] = "color",
	["Value"] = false,
	["Name"] = "Enable Coloring",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "Allows nameplates to be colored based on priority.",
	},
	{
	["Type"] = 1,
	["Key"] = "midColor",
	["Value"] = {
	1,
	0.92941182851791,
	0,
	1,
	},
	["Name"] = "Mid prio",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Set color for mid priority.",
	},
	{
	["Type"] = 1,
	["Key"] = "lowColor",
	["Value"] = {
	0.49803924560547,
	0.49803924560547,
	0.49803924560547,
	1,
	},
	["Name"] = "Low prio",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Set color for low priority.",
	},
	},
	["Name"] = "Priority based scaling",
	},
	{
	["OptionsValues"] = {
	["firstNameList"] = {
	},
	["fullNameList"] = {
	},
	},
	["HooksTemp"] = {
	},
	["UID"] = "0x639f1d45fbcede4",
	["Hooks"] = {
	["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renameUnit(unitId, unitFrame, envTable)\nend\n\n\n",
	["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renameUnit(unitId, unitFrame)\nend\n\n\n",
	["Initialization"] = "function (modTable)\n    local config = modTable.config\n    \n    local function debug(str)\n        -- Utility function for logging only when debugging\n        if config.debugMode then\n            print(\"DEBUG: \"..str)\n        end\n    end\n    \n    function modTable.setName(name, unitFrame)\n        -- Set the name text on the unitframe to the given name\n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n    end\n    \n    \n    function modTable.renameUnit(unitId, unitFrame)\n        local unitName = unitFrame.namePlateUnitName\n        local npcId = unitFrame.namePlateNpcId\n        local npcIdStr = tostring(npcId) -- The options list is always strings, so we need a string for lookup\n        \n        if (unitName) then\n            local  nameParts = strsplittable(' ', unitName)\n            \n            if config.debugMode then\n                if unitFrame.namePlateNpcId then\n                    debug(\"npcId: \"..unitFrame.namePlateNpcId)\n                end\n            end\n            \n            local name\n            if config.firstNameList[npcIdStr] then\n                debug(\"npc is in first name list\")\n                name = nameParts[1]\n            elseif config.fullNameList[npcIdStr] then\n                debug(\"npc is in full name list\")\n                name = unitName\n            else\n                debug(\"npc is last name only\")\n                debug(\"parts length is \"..#nameParts)\n                name = nameParts[#nameParts]\n            end\n            \n            modTable.setName(name, unitFrame)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	},
	["Time"] = 1721752282,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "https://wago.io/K1e4LY5nb/4",
	["Icon"] = 134331,
	["Enabled"] = true,
	["Revision"] = 125,
	["semver"] = "1.0.3",
	["Author"] = "Phonszmonk-Sylvanas",
	["Desc"] = "Show nameplate last name, first name or full name depending on id",
	["Prio"] = 99,
	["version"] = 4,
	["PlaterCore"] = 1,
	["LastHookEdited"] = "",
	["Options"] = {
	{
	["Type"] = 7,
	["Key"] = "firstNameList",
	["Value"] = {
	},
	["Name"] = "Show First Name",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
	["Desc"] = "List of npcIDs to show as first name only. The value field is not used",
	},
	{
	["Type"] = 7,
	["Key"] = "fullNameList",
	["Value"] = {
	},
	["Name"] = "Show Full Name",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
	["Desc"] = "List of npcIDs to show the full name fo. The value field is not used",
	},
	{
	["Type"] = 4,
	["Key"] = "debugMode",
	["Value"] = false,
	["Name"] = "Debug Mode",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
	["Desc"] = "Enable Debug Mode",
	},
	},
	["Name"] = "Last Name Only-BetterPerf",
	},
	{
	["OptionsValues"] = {
	},
	["LastHookEdited"] = "",
	["Hooks"] = {
	["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = aura1.filter == \"HARMFUL\" and 1 or 0\n        local p2 = aura2.filter == \"HARMFUL\" and 1 or 0\n        \n        return p1 > p2\n        --[[\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n    end]]\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
	},
	["Time"] = 1721752259,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["affix"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
	["Enabled"] = true,
	["Revision"] = 373,
	["semver"] = "",
	["Author"] = "Ditador-Azralon",
	["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
	["Prio"] = 99,
	["Name"] = "Aura Reorder",
	["PlaterCore"] = 1,
	["Options"] = {
	},
	["HooksTemp"] = {
	},
	["version"] = -1,
	},
	{
	["OptionsValues"] = {
	},
	["LastHookEdited"] = "",
	["UID"] = "0x6664e4861da49e1",
	["Hooks"] = {
	["Initialization"] = "function (modTable)\n    \n    ---SETTINGS YOU MAY TOUCH\n    --get this name from healthbar texture selection in General settings\n    --examples: Blizzard Raid Bar, BantoBar, PlaterFocus\n    local textureName = \"Naowh Mouseover\" \n    local alpha = 1    \n    --comment out the ones you dont use\n    --local color = \"green\"\n    --local color = \"#FF00FF\"\n    local color = {1, 1, 1, 1}\n    -----\n    \n    ---DONT TOUCH\n    local LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\n    local DF = _G [\"DetailsFramework\"]\n    modTable.texture = LibSharedMedia:Fetch (\"statusbar\", textureName)\n    modTable.alpha = alpha\n    local r, g, b, a = DF:ParseColors (color)\n    modTable.color = {r,g,b,a}    \n    \nend\n\n\n\n\n",
	["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local tex = unitFrame.HighlightFrame.HighlightTexture\n    tex:SetTexture (modTable.texture)\n    tex:SetBlendMode (\"ADD\")\n    tex:SetAlpha (modTable.alpha)\n    tex:SetVertexColor(unpack(modTable.color))\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
	},
	["Time"] = 1721752349,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["race"] = {
	},
	["affix"] = {
	},
	["encounter_ids"] = {
	},
	["spec"] = {
	},
	},
	["url"] = "",
	["Icon"] = 132089,
	["Enabled"] = true,
	["Revision"] = 153,
	["semver"] = "",
	["Author"] = "Nnoggiedh-Twisting Nether",
	["Desc"] = "",
	["Prio"] = 99,
	["Name"] = "NaowhUI - Mouseover Texture / Color",
	["PlaterCore"] = 1,
	["version"] = -1,
	["HooksTemp"] = {
	},
	["Options"] = {
	},
	},
	{
	["OptionsValues"] = {
	["absorbColor"] = {
	1,
	0.4862745404243469,
	0.4823529720306397,
	1,
	},
	["texture"] = "Interface\\Addons\\NaowhUI\\Core\\Media\\Textures\\Naowh_left",
	["overlayTexture"] = "Interface\\RaidFrame\\Shield-Overlay",
	["shieldColor"] = {
	0.9764706492424011,
	1,
	0.7411764860153198,
	1,
	},
	},
	["LastHookEdited"] = "Constructor",
	["Hooks"] = {
	["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    function envTable.create(unitFrame)\n        local bar = unitFrame.healthBar\n        local shields = bar.shieldAbsorbIndicator\n        local absorbs = bar.healAbsorbIndicator\n        \n        shields:SetTexture(modTable.config.texture)\n        shields:SetVertexColor(DetailsFramework:ParseColors(modTable.config.shieldColor))\n        bar.Settings.ShieldIndicatorTexture = modTable.config.texture\n        envTable.createOverlay(bar, shields)\n        \n        absorbs:SetTexture(modTable.config.texture)\n        absorbs:SetVertexColor(DetailsFramework:ParseColors(modTable.config.absorbColor))\n        envTable.createOverlay(bar, absorbs)\n        \n    end\n    \n    function envTable.createOverlay(bar, texture)\n        if texture.overlay then return end\n        \n        local overlay = bar:CreateTexture(nil, \"ARTWORK\")\n        \n        local r, g, b, a = texture:GetVertexColor()\n        overlay:SetVertexColor(r, g, b, a)\n        overlay:SetDrawLayer(\"ARTWORK\", 6)\n        overlay:SetTexture(modTable.config.overlayTexture, true, true)\n        overlay:SetAllPoints(texture)\n        overlay:SetHorizTile(true)\n        overlay:SetVertTile(true)\n        \n        texture.overlay = overlay \n        texture.overlay:Hide()\n    end\n    \n    function envTable.update(unitFrame)\n        local shield = unitFrame.healthBar.shieldAbsorbIndicator\n        \n        if shield:IsVisible() then\n            shield.overlay:Show()\n        else\n            shield.overlay:Hide()\n        end\n        \n    end\n    \n    envTable.create(unitFrame)\n    envTable.update(unitFrame)\nend",
	["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.update(unitFrame)\nend\n\n\n",
	},
	["Time"] = 1721752366,
	["LoadConditions"] = {
	["talent"] = {
	},
	["group"] = {
	},
	["class"] = {
	},
	["map_ids"] = {
	},
	["role"] = {
	},
	["pvptalent"] = {
	},
	["spec"] = {
	},
	["race"] = {
	},
	["encounter_ids"] = {
	},
	["affix"] = {
	},
	},
	["url"] = "https://wago.io/dtAR50M7a/3",
	["Icon"] = "INTERFACE\\ICONS\\Ability_Priest_AngelicBulwark",
	["Enabled"] = true,
	["Revision"] = 648,
	["semver"] = "1.0.2",
	["Author"] = "Lucyon-Bloodfeather",
	["Desc"] = "Some extra options for shields and absorbs",
	["Prio"] = 6,
	["Name"] = "Shield & Absorb Options",
	["PlaterCore"] = 1,
	["Options"] = {
	{
	["Type"] = 5,
	["Name"] = "Title",
	["Value"] = "Options for shield & absorb indicators. Reload to take effect!",
	["Key"] = "option2",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
	["Desc"] = "",
	},
	{
	["Type"] = 5,
	["Name"] = "Description",
	["Value"] = "Make sure Advanced > Show Health Prediction/Absorption and Show Shield Prediction is enabled for these to work.",
	["Key"] = "option7",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
	["Desc"] = "",
	},
	{
	["Type"] = 6,
	["Name"] = "",
	["Value"] = 0,
	["Key"] = "option10",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 5,
	["Name"] = "Shield Options Label",
	["Value"] = "Shield Options",
	["Key"] = "option7",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Name"] = "Shield Color",
	["Value"] = {
	1,
	1,
	1,
	1,
	},
	["Key"] = "shieldColor",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Color for shields that absorb damage",
	},
	{
	["Type"] = 6,
	["Name"] = "",
	["Value"] = 0,
	["Key"] = "option12",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 5,
	["Name"] = "Absorb Options",
	["Value"] = "Absorb Options",
	["Key"] = "option9",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
	["Desc"] = "",
	},
	{
	["Type"] = 1,
	["Name"] = "Absorb Color",
	["Value"] = {
	0.78039215686275,
	0.25098039215686,
	0.25098039215686,
	1,
	},
	["Key"] = "absorbColor",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
	["Desc"] = "Color for healing absorbtions (shields that absorb healing)",
	},
	{
	["Type"] = 6,
	["Name"] = "",
	["Value"] = 0,
	["Key"] = "option11",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
	["Desc"] = "",
	},
	{
	["Type"] = 3,
	["Name"] = "Texture",
	["Value"] = "Interface\\RaidFrame\\Shield-Fill",
	["Key"] = "texture",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
	["Desc"] = "The texture to use for shields and healing absorbs",
	},
	{
	["Type"] = 3,
	["Name"] = "Overlay Texture",
	["Value"] = "Interface\\RaidFrame\\Shield-Overlay",
	["Key"] = "overlayTexture",
	["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
	["Desc"] = "The overlay texture put on top of the shield/healabsorb texture",
	},
	},
	["HooksTemp"] = {
	},
	["version"] = 3,
	},
	},
	["auras_per_row_auto"] = false,
	["auras_per_row_amount2"] = 1,
	["aura_height_personal"] = 19,
	["aura_width"] = 24,
	["ghost_auras"] = {
	["auras"] = {
	["PRIEST"] = {
	[3] = {
	[589] = true,
	[34914] = true,
	},
	},
	["WARLOCK"] = {
	{
	[980] = true,
	[172] = true,
	},
	},
	},
	},
	["buff_frame_anchor_and_size_migrated"] = true,
	["pet_width_scale"] = 0.9999999403953552,
	["target_highlight_color"] = {
	1,
	1,
	},
	["health_statusbar_bgcolor"] = {
	0.1058823615312576,
	0.1058823615312576,
	0.1058823615312576,
	1,
	},
	["cast_statusbar_fadeout_time"] = 0.3999999761581421,
	["extra_icon_stack_outline"] = "MONOCHROME",
	["resources"] = {
	["y_offset_target"] = 20,
	["y_offset_target_withauras"] = 32,
	},
	["click_space"] = {
	128,
	20,
	},
	["castbar_target_font"] = "Naowh",
	["ui_parent_cast_level"] = 1,
	["ui_parent_buff2_level"] = -10,
	["range_check_in_range_or_target_alpha_friendlies"] = 1,
	["aura_grow_direction"] = 1,
	["health_animation_time_dilatation"] = 1.059999942779541,
	["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark6",
	["castbar_framelevel"] = 0,
	["cast_statusbar_spark_alpha"] = 0.25,
	["target_shady_enabled"] = false,
	["cast_statusbar_fadein_time"] = 0.019999999552965,
	["pet_height_scale"] = 0.9999999403953552,
	["aura_x_offset"] = 0.5699920654296875,
	["range_check_alpha_friendlies"] = 1,
	["ui_parent_scale_tune"] = 1.4084507467917,
	["healthbar_framelevel"] = 0,
	["profile_name"] = "Naowh",
	["ui_parent_buff_level"] = -6,
	["health_statusbar_bgtexture"] = "Naowh Left",
	["ui_parent_target_strata"] = "BACKGROUND",
	["aura_show_enrage"] = true,
	["aura_tracker"] = {
	["buff_tracked"] = {
	["227931"] = true,
	["327808"] = true,
	["328175"] = true,
	["262092"] = true,
	["297133"] = true,
	["333737"] = true,
	["209859"] = true,
	["331743"] = true,
	["273432"] = true,
	["321764"] = true,
	["163689"] = true,
	["233210"] = true,
	["226512"] = true,
	},
	["debuff_banned"] = {
	["247456"] = false,
	["207771"] = false,
	["264263"] = true,
	["412695"] = false,
	["417404"] = false,
	["394933"] = false,
	["1490"] = false,
	[207685] = false,
	[372245] = false,
	["409470"] = true,
	[204490] = false,
	["409472"] = true,
	["339137"] = true,
	[179057] = false,
	},
	["debuff_tracked"] = {
	["336449"] = true,
	["328175"] = true,
	["321020"] = true,
	},
	["buff_banned"] = {
	["333553"] = true,
	["165213"] = false,
	["409472"] = true,
	["374918"] = false,
	["374916"] = false,
	["38166"] = false,
	["265368"] = false,
	["207771"] = false,
	["61573"] = true,
	["374917"] = false,
	["409470"] = true,
	[372749] = false,
	["374881"] = false,
	["61574"] = true,
	["206150"] = true,
	},
	},
	["cast_statusbar_color"] = {
	nil,
	0.93333333333333,
	0.43137254901961,
	0.96000000089407,
	},
	["update_throttle"] = 0.12000000476837,
	["aura_timer_text_font"] = "Naowh",
	["tocversion"] = 100207,
	["castbar_icon_show"] = false,
	["indicator_extra_raidmark"] = false,
	["extra_icon_timer_font"] = "GothamNarrowUltra",
	["not_affecting_combat_alpha"] = 1,
	["target_highlight_alpha"] = 0.7999999523162842,
	["news_frame"] = {
	["PlaterNewsFrame"] = {
	["scale"] = 1,
	},
	},
	["extra_icon_show_offensive_border"] = {
	nil,
	0,
	0,
	},
	["auto_toggle_stacking_enabled"] = true,
	["target_shady_combat_only"] = false,
	["extra_icon_use_blizzard_border_color"] = false,
	["aura_sort"] = true,
	["target_shady_alpha"] = 0.59999996423721,
	["hover_highlight_alpha"] = 0.199999988079071,
	["tap_denied_color"] = {
	0.37254901960784,
	0.37254901960784,
	0.37254901960784,
	},
	["target_highlight_height"] = 12,
	["first_run2"] = true,
	["version"] = 18,
	["aura_width_personal"] = 23,
	["color_override_colors"] = {
	[3] = {
	0.99607843137255,
	0.29803921568627,
	0.30980392156863,
	},
	[4] = {
	1,
	0.93333333333333,
	0.43137254901961,
	},
	[5] = {
	0.38039215686275,
	0.87450980392157,
	0.23137254901961,
	},
	},
	["indicator_elite"] = false,
	["auto_toggle_stacking"] = {
	["cities"] = true,
	},
	["castbar_icon_attach_to_side"] = "right",
	["click_space_friendly"] = {
	1,
	1,
	},
	["patch_version"] = 36,
	["range_check_in_range_or_target_alpha"] = 1,
	["captured_casts"] = {
	[375727] = {
	["encounterName"] = "Chrono-Lord Deios",
	["source"] = "Chrono-Lord Deios",
	["encounterID"] = 2559,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 184125,
	},
	[369409] = {
	["source"] = "Earthen Custodian",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 184130,
	},
	[390111] = {
	["encounterName"] = "Khajin the Unyielding",
	["source"] = "Khajin the Unyielding",
	["encounterID"] = 2617,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 189727,
	},
	[369061] = {
	["encounterName"] = "Emberon",
	["source"] = "Emberon",
	["encounterID"] = 2558,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 184422,
	},
	[382555] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Bracken Warscourge",
	["npcID"] = 185529,
	},
	[381444] = {
	["encounterName"] = "Hackclaw's War-Band",
	["source"] = "Rira Hackclaw",
	["encounterID"] = 2570,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186122,
	},
	[384524] = {
	["encounterName"] = "Watcher Irideus",
	["source"] = "Watcher Irideus",
	["encounterID"] = 2615,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 189719,
	},
	[376811] = {
	["encounterName"] = "Treemouth",
	["source"] = "Treemouth",
	["encounterID"] = 2568,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186120,
	},
	[384336] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Nokhud Lancemaster",
	["npcID"] = 192800,
	},
	[377383] = {
	["source"] = "Alpha Eagle",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 192333,
	},
	[377034] = {
	["encounterName"] = "Crawth",
	["source"] = "Crawth",
	["encounterID"] = 2564,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 191736,
	},
	[369573] = {
	["encounterName"] = "The Lost Dwarves",
	["source"] = "Baelog",
	["encounterID"] = 2555,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 184581,
	},
	[340300] = {
	["npcID"] = 173720,
	},
	[385958] = {
	["encounterName"] = "Vexamus",
	["source"] = "Vexamus",
	["encounterID"] = 2562,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 194181,
	},
	[369703] = {
	["encounterName"] = "Bromach",
	["source"] = "Bromach",
	["encounterID"] = 2556,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 184018,
	},
	[388976] = {
	["source"] = "Arcane Ravager",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 196671,
	},
	[382277] = {
	["encounterName"] = "Balakar Khan",
	["source"] = "Balara",
	["npcID"] = 193457,
	["event"] = "SPELL_CAST_START",
	["encounterID"] = 2580,
	},
	[387135] = {
	["source"] = "Primalist Arcblade",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 194898,
	},
	[392406] = {
	["source"] = "Storm Warrior",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 197982,
	},
	[386660] = {
	["encounterName"] = "Leymor",
	["source"] = "Leymor",
	["encounterID"] = 2582,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186644,
	},
	[387614] = {
	["source"] = "Ukhel Deathspeaker",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 195851,
	},
	[372311] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Qalashi Trainee",
	["npcID"] = 189266,
	},
	[388060] = {
	["source"] = "Stinkbreath",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 187033,
	},
	[373614] = {
	["source"] = "Blazebound Destroyer",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 190034,
	},
	[326021] = {
	["npcID"] = 172312,
	},
	[374567] = {
	["encounterName"] = "Leymor",
	["source"] = "Leymor",
	["encounterID"] = 2582,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186644,
	},
	[373742] = {
	["encounterName"] = "Chargath, Bane of Scales",
	["source"] = "Chargath, Bane of Scales",
	["npcID"] = 189340,
	["event"] = "SPELL_CAST_START",
	["encounterID"] = 2613,
	},
	[377204] = {
	["encounterName"] = "Warlord Sargha",
	["source"] = "Warlord Sargha",
	["npcID"] = 189901,
	["event"] = "SPELL_CAST_START",
	["encounterID"] = 2611,
	},
	[374569] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Monstrous Decay",
	["npcID"] = 186227,
	},
	[372696] = {
	["source"] = "Primal Juggernaut",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 188244,
	},
	[386063] = {
	["encounterName"] = "Teera and Maruuk",
	["source"] = "Maruuk",
	["npcID"] = 186338,
	["event"] = "SPELL_CAST_START",
	["encounterID"] = 2581,
	},
	[321834] = {
	["encounterName"] = "Mistcaller",
	["npcID"] = 164501,
	["encounterID"] = 2392,
	},
	[375079] = {
	["source"] = "Squallbringer Cyraz",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 190370,
	},
	[372222] = {
	["encounterName"] = "Azureblade",
	["source"] = "Azureblade",
	["encounterID"] = 2585,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186739,
	},
	[323137] = {
	["encounterName"] = "Ingra Maloch",
	["encounterID"] = 2397,
	["npcID"] = 164804,
	},
	[393432] = {
	["source"] = "Refti Defender",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 190340,
	},
	[369811] = {
	["source"] = "Hulking Berserker",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 184020,
	},
	[390290] = {
	["source"] = "Infuser Sariya",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 190405,
	},
	[370764] = {
	["source"] = "Crystal Fury",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 187160,
	},
	[377559] = {
	["encounterName"] = "Treemouth",
	["source"] = "Treemouth",
	["encounterID"] = 2568,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186120,
	},
	[387910] = {
	["source"] = "Algeth'ar Echoknight",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 196200,
	},
	[388958] = {
	["isChanneled"] = true,
	["source"] = "Arcane Ravager",
	["event"] = "SPELL_CAST_SUCCESS",
	["npcID"] = 196671,
	},
	[370766] = {
	["source"] = "Crystal Thrasher",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 187139,
	},
	[391118] = {
	["source"] = "Scalebane Lieutenant",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 191739,
	},
	[340160] = {
	["npcID"] = 173655,
	},
	[385531] = {
	["encounterName"] = "Gulping Goliath",
	["source"] = "Gulping Goliath",
	["encounterID"] = 2616,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 189722,
	},
	[321968] = {
	["npcID"] = 164929,
	},
	[391723] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Flamegullet",
	["npcID"] = 197697,
	},
	[377912] = {
	["source"] = "Guardian Sentry",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 192680,
	},
	[381834] = {
	["encounterName"] = "Hackclaw's War-Band",
	["source"] = "Rira Hackclaw",
	["encounterID"] = 2570,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186122,
	},
	[369563] = {
	["encounterName"] = "The Lost Dwarves",
	["source"] = "Baelog",
	["encounterID"] = 2555,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 184581,
	},
	[375351] = {
	["source"] = "Glacial Proto-Dragon",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 190403,
	},
	[382708] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Qalashi Warden",
	["npcID"] = 193293,
	},
	[373943] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Wilted Oak",
	["npcID"] = 186229,
	},
	[331718] = {
	["npcID"] = 171772,
	},
	[382712] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Wilted Oak",
	["npcID"] = 186229,
	},
	[391726] = {
	["event"] = "SPELL_CAST_START",
	["source"] = "Thunderhead",
	["npcID"] = 197698,
	},
	[385916] = {
	["encounterName"] = "Granyth",
	["source"] = "Granyth",
	["encounterID"] = 2637,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186616,
	},
	[385578] = {
	["encounterName"] = "Azureblade",
	["source"] = "Azureblade",
	["encounterID"] = 2585,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186739,
	},
	[324923] = {
	["npcID"] = 164926,
	},
	[385832] = {
	["source"] = "Rageclaw",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 187192,
	},
	[388046] = {
	["source"] = "Stinkbreath",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 187033,
	},
	[376170] = {
	["encounterName"] = "Decatriarch Wratheye",
	["source"] = "Decatriarch Wratheye",
	["encounterID"] = 2569,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 186121,
	},
	[375251] = {
	["encounterName"] = "Magmatusk",
	["source"] = "Magmatusk",
	["npcID"] = 181861,
	["event"] = "SPELL_CAST_START",
	["encounterID"] = 2610,
	},
	[331743] = {
	["npcID"] = 166276,
	},
	[374361] = {
	["encounterName"] = "Echo of Doragosa",
	["source"] = "Echo of Doragosa",
	["encounterID"] = 2565,
	["event"] = "SPELL_CAST_START",
	["npcID"] = 190609,
	},
	[387067] = {
	["source"] = "Forgotten Creation",
	["event"] = "SPELL_CAST_START",
	["npcID"] = 193214,
	},
	},
	["health_cutoff"] = false,
	["number_region_first_run"] = true,
	["castbar_target_anchor"] = {
	["y"] = 8.349998474121094,
	["x"] = 24.72999572753906,
	["side"] = 6,
	},
	["extra_icon_height"] = 26,
	["script_auto_imported"] = {
	["Aura - Buff Alert"] = 15,
	["Cast - Effect After Cast [P]"] = 2,
	["Explosion Affix M+"] = 14,
	["Aura - Debuff Alert"] = 12,
	["Cast - Castbar is Timer [P]"] = 2,
	["Cast - Ultra Important"] = 14,
	["Add - Health Markers [P]"] = 2,
	["Cast - Small Alert"] = 12,
	["Aura - Invalidate Unit"] = 1,
	["Add - Important [P]"] = 4,
	["Unit - Main Target"] = 11,
	["Aura - Blink Time Left"] = 13,
	["Add - Tag Number [P]"] = 2,
	["Unit Power"] = 1,
	["Cast - Glowing [P]"] = 10,
	["Cast - Important Target [P]"] = 2,
	["Fixate On You"] = 11,
	["Cast - Very Important"] = 15,
	["Cast - Alert + Timer [P]"] = 4,
	["Cast - Shield Interrupt"] = 2,
	["Relics 9.2 M Dungeons"] = 2,
	["Aura is Shield [P]"] = 2,
	["Add - Warning [P]"] = 5,
	["Unit - Important"] = 11,
	["Aura While Casting [P]"] = 1,
	["Cast - Big Alert"] = 14,
	["Add - Explode on Die [P]"] = 1,
	["Countdown"] = 11,
	["Auto Set Skull"] = 11,
	["Cast - On Going Cast [P]"] = 2,
	["Color Change"] = 1,
	["Spiteful Affix"] = 3,
	["Add - Non Elite Trash [P]"] = 4,
	["Cast - Quick Flash"] = 2,
	["Aura Border Color"] = 1,
	["Cast - Stop Casting"] = 4,
	["Fixate by Unit Buff [P]"] = 2,
	["Cast - Frontal Cone"] = 15,
	["Fixate"] = 11,
	["Cast - Circular Swipe"] = 4,
	["Unit - Health Markers"] = 12,
	["Cast - Tank Interrupt"] = 12,
	["Unit - Show Energy"] = 11,
	},
	["border_color"] = {
	nil,
	nil,
	nil,
	1,
	},
	["aura2_grow_direction"] = 3,
	["aura_alpha"] = 1,
	["aura_timer_text_size"] = 9,
	["indicator_faction"] = false,
	["extra_icon_show_defensive_border"] = {
	0,
	0,
	0,
	},
	["first_run3"] = true,
	["dps"] = {
	["colors"] = {
	["aggro"] = {
	0.99607843137255,
	0.29803921568627,
	0.30980392156863,
	},
	["notontank"] = {
	0.99607843137255,
	0.29803921568627,
	0.30980392156863,
	},
	["noaggro"] = {
	0.73333333333333,
	0.19607843137255,
	},
	["pulling"] = {
	nil,
	0.93333333333333,
	0.43137254901961,
	},
	},
	},
	["aura_stack_color"] = {
	nil,
	0.94509803921569,
	0.93725490196078,
	},
	["indicator_raidmark_anchor"] = {
	["y"] = 1.079994201660156,
	["x"] = 0,
	["side"] = 9,
	},
	["tank"] = {
	["colors"] = {
	["anothertank"] = {
	0.73333333333333,
	0.19607843137255,
	},
	["aggro"] = {
	0.38039215686275,
	0.87450980392157,
	0.23137254901961,
	},
	["noaggro"] = {
	0.99607843137255,
	0.29803921568627,
	0.30980392156863,
	},
	["nocombat"] = {
	0.99607843137255,
	0.29803921568627,
	0.30980392156863,
	},
	["pulling"] = {
	nil,
	0.93333333333333,
	0.43137254901961,
	},
	},
	},
	["captured_spells"] = {
	[323137] = {
	["encounterName"] = "Ingra Maloch",
	["source"] = "Droman Oulfarran",
	["encounterID"] = 2397,
	["isChanneled"] = false,
	["event"] = "SPELL_CAST_SUCCESS",
	["npcID"] = 164804,
	},
	[392406] = {
	["isChanneled"] = false,
	["event"] = "SPELL_CAST_SUCCESS",
	["source"] = "Storm Warrior",
	["npcID"] = 197982,
	},
	[372696] = {
	["isChanneled"] = false,
	["event"] = "SPELL_CAST_SUCCESS",
	["source"] = "Primal Juggernaut",
	["npcID"] = 188244,
	},
	[391723] = {
	["isChanneled"] = true,
	["event"] = "SPELL_CAST_SUCCESS",
	["source"] = "Flamegullet",
	["npcID"] = 197697,
	},
	[391726] = {
	["isChanneled"] = true,
	["event"] = "SPELL_CAST_SUCCESS",
	["source"] = "Thunderhead",
	["npcID"] = 197698,
	},
	[331718] = {
	["isChanneled"] = false,
	["source"] = "Mistveil Defender",
	["event"] = "SPELL_CAST_SUCCESS",
	["npcID"] = 171772,
	},
	[373614] = {
	["isChanneled"] = false,
	["event"] = "SPELL_CAST_SUCCESS",
	["source"] = "Blazebound Destroyer",
	["npcID"] = 190034,
	},
	},
	["extra_icon_show_purge_border"] = {
	nil,
	0,
	0,
	},
	["cast_statusbar_spark_width"] = 30,
}